<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Da&#39;sBlog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunhao.win/"/>
  <updated>2017-06-20T07:25:57.653Z</updated>
  <id>http://sunhao.win/</id>
  
  <author>
    <name>Sun Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh详细登录过程</title>
    <link href="http://sunhao.win/articles/linux-ssh.html"/>
    <id>http://sunhao.win/articles/linux-ssh.html</id>
    <published>2017-06-20T07:22:00.000Z</published>
    <updated>2017-06-20T07:25:57.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先说下相关概念"><a href="#首先说下相关概念" class="headerlink" title="首先说下相关概念:"></a>首先说下相关概念:</h3><p>明文：需要秘密传送的消息。</p>
<p>密文：明文经过密码变换后的消息。</p>
<p>加密：由明文到密文的变换。</p>
<p>解密：从密文恢复出明文的过程。</p>
<p>破解：非法接收者试图从密文分析出明文的过程。</p>
<p>加密算法：对明文进行加密时采用的一组规则。</p>
<p>解密算法：对密文进行解密时采用的一组规则。</p>
<p>密钥：加密和解密时使用的一组密码信息。</p>
<p>对称加密：是采用单钥密码系统的加密方法，使用同一密钥对信息进行加密和解密的加密方法。</p>
<p>非对称加密：需要两个密钥：公共密钥和私有密钥，它们成对出现，公钥加密的数据有且只有私钥能解密，私钥加密的数据有且只有公钥解密，相对于“对称加密”，“非对称加密”加密方法加密和解密使用不同的密钥，所以叫“非对称加密”加密方法。</p>
<p>对称加密和非对称加密的区别：在于加密和解密是否使用的同一个密钥。<br> <a id="more"></a></p>
<h3 id="加密、身份认证、数字签名认证："><a href="#加密、身份认证、数字签名认证：" class="headerlink" title="加密、身份认证、数字签名认证："></a>加密、身份认证、数字签名认证：</h3><pre><code> 加密：将数据资料加密，使得非法用户即便获取加密后的资料，也无法获取正确的资料内容，所以数据加密可以保证数据防止监听攻击；其重点在于数据的安全性。

身份认证：判断某身份的真实性，确认身份后，系统才可以依不同的身份赋予不同的权限；其重点在于用户的真实性。

数字签名认证：首先&quot;数字签名&quot;就是附加在数据单元上的一些数据，或是对数据单元所作的密码变换。这种数据或变换允许接收者判断数据的来源和数据的完整性，防止被伪造篡改。数字签名认证侧重于把保证数据的完整性，防止被伪造和篡改。
</code></pre><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170620/152108540.png" alt="mark"></p>
<h3 id="认证原理-有2种认证方式："><a href="#认证原理-有2种认证方式：" class="headerlink" title="认证原理: 有2种认证方式："></a>认证原理: 有2种认证方式：</h3><p>基于账号和口令的验证方式 和 基于公钥和私钥的验证方式</p>
<p>ssh的登录过程分为5个阶段<br>        1、版本号协商阶段<br>        2、密钥和算法协商阶段<br>        3、认证阶段<br>        4、会话请求阶段<br>        5、会话交互阶段</p>
<h4 id="1、版本号协商阶段"><a href="#1、版本号协商阶段" class="headerlink" title="1、版本号协商阶段"></a>1、版本号协商阶段</h4><pre><code>服务端打开端口22，等待客户连接。
客户端向服务端发起TCP连接，连接建立后，服务端向客户端发送第一个报文，包括版本标志字符串，格式为“协议版本号 次协议版本号 软件版本号”。
客户端收到报文后，解析协议版本号，如果服务端的协议版本号比自己的低，且客户端能支持服务端的低版本，就使用服务端的协议号，否则使用自己的协议版本号。
客户端回复服务端一个报文，包含了客户端决定使用的协议版本号。
服务端比较客户端发过来的版本号，决定是否能同客户端交互。
如果协商成功，就进入密钥和算法协商阶段。否则服务端断开TCP连接。
</code></pre><h4 id="2、密钥和算法协商阶段"><a href="#2、密钥和算法协商阶段" class="headerlink" title="2、密钥和算法协商阶段"></a>2、密钥和算法协商阶段</h4><pre><code>服务端和客户端分别发送算法协商报文给对方，报文中包含自己支持的公钥算法列表、加密算法列表、消息验证码算法列表、压缩算法列表等。
服务端和客户端根据对方和自己支持的算法得出最终使用的算法。
服务端和客户端利用DH交换算法、主机密钥对等参数，生成会话密钥和会话ID。
    c公 客户端公钥
    c密 客户端密钥
    s公 服务端公钥
    s密 服务端密钥
在版本号协商阶段完成后：
服务端将 s公 发送给客户端。
服务端生成会话ID ，设为 id ，发送给客户端。
客户端生成会话密钥，设为 key ，并计算 res = id 异或 key。
客户端将 res 用 s公 进行加密，将结果发送给服务端。
服务端用 s密 进行解密，得到 res。
服务器计算 res 异或 id，得到 key。
至此服务端和客户端都知道了会话密钥和会话ID，以后的数据传输都使用会话密钥进行加密和解密。
</code></pre><h4 id="3、认证阶段"><a href="#3、认证阶段" class="headerlink" title="3、认证阶段"></a>3、认证阶段</h4><pre><code>基于账号和口令的验证方式：
    客户端使用密钥和算法协商阶段生成的会话密钥加密账号、认证方法、口令，将结果发送给服务器。
    服务端使用获得的会话密钥解密报文，得到账号和口令。
    服务端对这个账号和口令进行判断，如果失败，向客户端发送认证失败报文，其中包含了可以再次认证的方法列表。
    客户端从认证方法列表中选择一种方法进行再次认证。
    这个过程反复进行，直到认证成功或者认证次数达到上限，服务端关闭本次TCP连接。
基于公钥和私钥的验证方式：
    使用ssh-keygen程序生成公钥 id_dsa.pub 和私钥 id_dsa，一般是在客户端上生成，然后把 id_dsa.pub 通过某种方式发送给服务端。
    服务端放在将要远程登录过来的那个账号的目录的.ssh目录下面。
    客户端使用密钥和算法协商阶段生成的会话密钥加密账号、认证方法、id_dsa.pub，将结果发送给服务端。
    服务端使用会话密钥解密报文，得到账号、id_dsa.pub。    服务端在这个账号的目录的.ssh目录下找对应的公钥，如果没有找到，发送失败消息给客户端，如果找到，比较客户发送过来的这个公钥和找到的公钥，如果内容相同，服务端生成一个随机的字符串，简称“质询”，然后使用找到的公钥加密这个质询，然后使用会话密钥再次加密。
    服务端把这个双重加密的数据发送给客户端。
    客户端使用会话密钥解密报文，然后使用id_dsa再次解密数据，得到质询。
    客户端使用会话密钥加密质询，发送给服务端。
    服务端使用会话密钥解密报文，得到质询，判断是不是自己生成的那个质询，如果不相同，发送失败消息给客户端，如果相同，认证通过。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先说下相关概念&quot;&gt;&lt;a href=&quot;#首先说下相关概念&quot; class=&quot;headerlink&quot; title=&quot;首先说下相关概念:&quot;&gt;&lt;/a&gt;首先说下相关概念:&lt;/h3&gt;&lt;p&gt;明文：需要秘密传送的消息。&lt;/p&gt;
&lt;p&gt;密文：明文经过密码变换后的消息。&lt;/p&gt;
&lt;p&gt;加密：由明文到密文的变换。&lt;/p&gt;
&lt;p&gt;解密：从密文恢复出明文的过程。&lt;/p&gt;
&lt;p&gt;破解：非法接收者试图从密文分析出明文的过程。&lt;/p&gt;
&lt;p&gt;加密算法：对明文进行加密时采用的一组规则。&lt;/p&gt;
&lt;p&gt;解密算法：对密文进行解密时采用的一组规则。&lt;/p&gt;
&lt;p&gt;密钥：加密和解密时使用的一组密码信息。&lt;/p&gt;
&lt;p&gt;对称加密：是采用单钥密码系统的加密方法，使用同一密钥对信息进行加密和解密的加密方法。&lt;/p&gt;
&lt;p&gt;非对称加密：需要两个密钥：公共密钥和私有密钥，它们成对出现，公钥加密的数据有且只有私钥能解密，私钥加密的数据有且只有公钥解密，相对于“对称加密”，“非对称加密”加密方法加密和解密使用不同的密钥，所以叫“非对称加密”加密方法。&lt;/p&gt;
&lt;p&gt;对称加密和非对称加密的区别：在于加密和解密是否使用的同一个密钥。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="ssh" scheme="http://sunhao.win/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>npm版本说明及安装范围版本</title>
    <link href="http://sunhao.win/articles/npm-install.html"/>
    <id>http://sunhao.win/articles/npm-install.html</id>
    <published>2017-06-15T06:38:39.000Z</published>
    <updated>2017-06-15T07:50:02.611Z</updated>
    
    <content type="html"><![CDATA[<p>最近安装测试环境需要安装webpack1版本。但是用cnpm安装的时候默认已经是2.6.1了</p>
<p>那么我们怎么安装指定版本呢。</p>
<h3 id="Semver语义化版本控制规范"><a href="#Semver语义化版本控制规范" class="headerlink" title="Semver语义化版本控制规范"></a>Semver语义化版本控制规范</h3><p>首先node采用semver规范，感兴趣的可以研究下。在这我们要明白版本号。<br><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">http://semver.org/lang/zh-CN/</a></p>
<p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：<br>主版本号：当你做了不兼容的API 修改，<br>次版本号：当你做了向下兼容的功能性新增，<br>修订号：当你做了向下兼容的问题修正。<br>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸<br>例如1.2.19   1是版本号 ，2是次版本号，19是修订号 </p>
<a id="more"></a>
<h3 id="我们看看我们配置的依赖包"><a href="#我们看看我们配置的依赖包" class="headerlink" title="我们看看我们配置的依赖包"></a>我们看看我们配置的依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">   &quot;rimraf&quot;: &quot;^2.6.1&quot;,</div><div class="line">   &quot;webpack&quot;: &quot;^2.6.1&quot;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其中^2.6.1就是版本号。我们看看官方解释</p>
<p>dependencies</p>
<p>Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.</p>
<p>Dependencies是将包名映射到版本范围的简单对象。版本范围是一个字符串，它具有一个或多个空格分隔的描述符。Dependencies也可以用tarball或git来标识。</p>
<p>Please do not put test harnesses or transpilers in your dependencies object. See devDependencies, below.</p>
<p>See semver for more details about specifying version ranges.</p>
<p>请不要在您的依赖对象中放置testharnesses或transpilers。请看下面的devDependencies。</p>
<p>ps:testharnesses测试实例工具，transpilers编译es6的工具</p>
<pre><code>version Must match version exactly
版本必须精确匹配

&gt;version Must be greater than version
&gt;大于指定版本

&gt;=version etc
&gt;=大于等于指定版本

&lt;version
&lt;=小于指定版本

&lt;=version
&lt;=小于等于指定版本

~version &quot;Approximately equivalent to version&quot; See semver
~近似于版本  例如2.1.1版本  他的近似版本类似 2.1.x  x任意


^version &quot;Compatible with version&quot; See semver
^兼容版本

1.2.x 1.2.0, 1.2.1, etc., but not 1.3.0
例如1.2.x 1.2.0, 1.2.1, 等., 但1.3.0就不是了

http://... See &apos;URLs as Dependencies&apos; below

* Matches any version
*匹配任意版本

&quot;&quot; (just an empty string) Same as *
&quot;&quot;(空字符串)和*一样

version1 - version2 Same as &gt;=version1 &lt;=version2.
version1 - version2 例如 &gt;=version1 &lt;=version2. 大于等于version1小于等于version2

range1 || range2 Passes if either range1 or range2 are satisfied.
range1 || range2 例如1.2.1||2.2.1 这两个版本都可以。
</code></pre><p>git… See ‘Git URLs as Dependencies’ below</p>
<p>git方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git://github.com/user/project.git#commit-ish</div><div class="line">git+ssh://user@hostname:project.git#commit-ish</div><div class="line">git+ssh://user@hostname/project.git#commit-ish</div><div class="line">git+http://user@hostname/project/blah.git#commit-ish</div><div class="line">git+https://user@hostname/project/blah.git#commit-ish</div></pre></td></tr></table></figure></p>
<p>user/repo See ‘GitHub URLs’ below</p>
<p>github方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;foo&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;expressjs/express&quot;,</div><div class="line">    &quot;mocha&quot;: &quot;mochajs/mocha#4727d357ea&quot;,</div><div class="line">    &quot;module&quot;: &quot;user/repo#feature\/branch&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>tag A specific version tagged and published as tag See npm-dist-tag</p>
<p>通过一个版本标记类似，tag是我们发布包做的标记。<br>    npm install name@tag </p>
<pre><code>path/path/path See Local Paths below
</code></pre><p>通过本地安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;baz&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;bar&quot;: &quot;file:../foo/bar&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example, these are all valid:</p>
<p>示例</p>
<pre><code>{ &quot;dependencies&quot; :
  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;
  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;
  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;
  , &quot;boo&quot; : &quot;2.0.1&quot;
  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;
  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;
  , &quot;til&quot; : &quot;~1.2&quot;
  , &quot;elf&quot; : &quot;~1.2.3&quot;
  , &quot;two&quot; : &quot;2.x&quot;
  , &quot;thr&quot; : &quot;3.3.x&quot;
  , &quot;lat&quot; : &quot;latest&quot;
  , &quot;dyl&quot; : &quot;file:../dyl&quot;
  }
}
</code></pre><h3 id="我们再看一下安装规范"><a href="#我们再看一下安装规范" class="headerlink" title="我们再看一下安装规范"></a>我们再看一下安装规范</h3><pre><code>npm install &lt;name&gt;@&lt;version&gt;

指定安装的package 版本

npm install (with no args in a package dir)
npm install &lt;tarball file&gt;
npm install &lt;tarball url&gt;
npm install &lt;folder&gt;
npm install [@&lt;scope&gt;/]&lt;name&gt; [--save|--save-dev|--save-optional] [--save-exact]
npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;tag&gt;
npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;version&gt;
npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;version range&gt;
npm i (with any of the previous argument usage)
</code></pre><p>好了   说重点  安装我们的webpack1</p>
<pre><code>npm install webpack@^1.* --save-dev
</code></pre><h3 id="额外赠送"><a href="#额外赠送" class="headerlink" title="额外赠送"></a>额外赠送</h3><p>npm init  会引导你创建一个package.json文件，包括名称、版本、作者这些信息等</p>
<p>npm remove <name>移除</name></p>
<p>npm update <name>更新</name></p>
<p>npm ls 列出当前安装的了所有包</p>
<p>npm root 查看当前包的安装路径</p>
<p>npm root -g  查看全局的包的安装路径</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近安装测试环境需要安装webpack1版本。但是用cnpm安装的时候默认已经是2.6.1了&lt;/p&gt;
&lt;p&gt;那么我们怎么安装指定版本呢。&lt;/p&gt;
&lt;h3 id=&quot;Semver语义化版本控制规范&quot;&gt;&lt;a href=&quot;#Semver语义化版本控制规范&quot; class=&quot;headerlink&quot; title=&quot;Semver语义化版本控制规范&quot;&gt;&lt;/a&gt;Semver语义化版本控制规范&lt;/h3&gt;&lt;p&gt;首先node采用semver规范，感兴趣的可以研究下。在这我们要明白版本号。&lt;br&gt;&lt;a href=&quot;http://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://semver.org/lang/zh-CN/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;br&gt;主版本号：当你做了不兼容的API 修改，&lt;br&gt;次版本号：当你做了向下兼容的功能性新增，&lt;br&gt;修订号：当你做了向下兼容的问题修正。&lt;br&gt;先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸&lt;br&gt;例如1.2.19   1是版本号 ，2是次版本号，19是修订号 &lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://sunhao.win/categories/npm/"/>
    
    
      <category term="npm" scheme="http://sunhao.win/tags/npm/"/>
    
      <category term="install" scheme="http://sunhao.win/tags/install/"/>
    
      <category term="npm版本" scheme="http://sunhao.win/tags/npm%E7%89%88%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>《TypeScript 中文入门教程》 8、函数</title>
    <link href="http://sunhao.win/articles/study-typescript.html"/>
    <id>http://sunhao.win/articles/study-typescript.html</id>
    <published>2017-06-13T01:00:43.000Z</published>
    <updated>2017-06-13T01:07:16.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转载：《TypeScript-中文入门教程》-8、函数"><a href="#转载：《TypeScript-中文入门教程》-8、函数" class="headerlink" title="转载：《TypeScript 中文入门教程》 8、函数"></a>转载：《TypeScript 中文入门教程》 8、函数</h2><blockquote>
<p>版权<br>文章转载自：<a href="https://github.com/zhongsp" target="_blank" rel="external">https://github.com/zhongsp</a></p>
</blockquote>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易的使用。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。<br><a id="more"></a><br>通过下面的例子可以迅速回想起这两种JavaScript中的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Named function</div><div class="line">function add(x, y) &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Anonymous function</div><div class="line">var myAdd = function(x, y) &#123; return x + y; &#125;;</div></pre></td></tr></table></figure></p>
<p>在JavaScript里，函数可以可以使用函数体外部的变量。 当函数这么做时，我们说它‘捕获’了这些变量。 至于为什么可以这样做以及其中的利弊超出了本文的范围，但是深刻理解这个机制对学习JavaScript和TypeScript会很有帮助。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var z = 100;</div><div class="line"></div><div class="line">function addToZ(x, y) &#123;</div><div class="line">    return x + y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>为函数定义类型<br>让我们为上面那个函数添加类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function add(x: number, y: number): number &#123;</div><div class="line">    return x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myAdd = function(x: number, y: number): number &#123; return x+y; &#125;;</div></pre></td></tr></table></figure></p>
<p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p>
<p>书写完整函数类型<br>现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var myAdd: (x:number, y:number)=&gt;number =</div><div class="line">    function(x: number, y: number): number &#123; return x+y; &#125;;</div></pre></td></tr></table></figure></p>
<p>函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。 这个名字只是为了增加可读性。 我们也可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var myAdd: (baseValue:number, increment:number) =&gt; number =</div><div class="line">    function(x: number, y: number): number &#123; return x + y; &#125;;</div></pre></td></tr></table></figure></p>
<p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</p>
<p>第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用(=&gt;)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为void而不能留空。</p>
<p>函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成API的一部分。</p>
<h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><p>尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript编译器会自动识别出类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// myAdd has the full function type</div><div class="line">var myAdd = function(x: number, y: number): number &#123; return x + y; &#125;;</div><div class="line"></div><div class="line">// The parameters `x` and `y` have the type number</div><div class="line">var myAdd: (baseValue:number, increment:number) =&gt; number =</div><div class="line">    function(x, y) &#123; return x + y; &#125;;</div></pre></td></tr></table></figure></p>
<p>这叫做“按上下文归类”，是类型推论的一种。 它帮助我们更好地为程序指定类型。</p>
<h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p>TypeScript里的每个函数参数都是必须的。 这不是指不能传递null或undefined作为参数，而是说编译器检查用户是否为每个参数都传入了值。 编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, lastName: string) &#123;</div><div class="line">    return firstName + &quot; &quot; + lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var result1 = buildName(&quot;Bob&quot;);                  // error, too few parameters</div><div class="line">var result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  // error, too many parameters</div><div class="line">var result3 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);         // ah, just right</div></pre></td></tr></table></figure></p>
<p>JavaScript里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是undefined。 在TypeScript里我们可以在参数名旁使用?实现可选参数的功能。 比如，我们想让last name是可选的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, lastName?: string) &#123;</div><div class="line">    if (lastName)</div><div class="line">        return firstName + &quot; &quot; + lastName;</div><div class="line">    else</div><div class="line">        return firstName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var result1 = buildName(&quot;Bob&quot;);  // works correctly now</div><div class="line">var result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  // error, too many parameters</div><div class="line">var result3 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);  // ah, just right</div></pre></td></tr></table></figure></p>
<p>可选参数必须在必须跟在必须参数后面。 如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。</p>
<p>在TypeScript里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是undefined时。 它们叫做有默认初始化值的参数。 让我们修改上例，把last name的默认值设置为”Smith”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, lastName = &quot;Smith&quot;) &#123;</div><div class="line">    return firstName + &quot; &quot; + lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var result1 = buildName(&quot;Bob&quot;);                  // works correctly now, returns &quot;Bob Smith&quot;</div><div class="line">var result2 = buildName(&quot;Bob, undefined&quot;);       // still works, also returns &quot;Bob Smith&quot;</div><div class="line">var result3 = buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  // error, too many parameters</div><div class="line">var result4 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);         // ah, just right</div></pre></td></tr></table></figure></p>
<p>在所有必须参数后面的带默认初始化的参数都是可选的，与可选参数一样，在调用函数的时候可以省略。 也就是说可选参数与末尾的默认参数共享参数类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, lastName?: string) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div><div class="line">和</div><div class="line"></div><div class="line">function buildName(firstName: string, lastName = &quot;Smith&quot;) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>共享同样的类型(firstName: string, lastName?: string) =&gt; string。 默认参数的默认值消失了，只保留了它是一个可选参数的信息。</p>
<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入undefined值来获得默认值。 例如，我们重写最后一个例子，让firstName是带默认值的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName = &quot;Will&quot;, lastName: string) &#123;</div><div class="line">    return firstName + &quot; &quot; + lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var result1 = buildName(&quot;Bob&quot;);                  // error, too few parameters</div><div class="line">var result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);  // error, too many parameters</div><div class="line">var result3 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);         // okay and returns &quot;Bob Adams&quot;</div><div class="line">var result4 = buildName(undefined, &quot;Adams&quot;);     // okay and returns &quot;Will Adams&quot;</div></pre></td></tr></table></figure></p>
<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用arguments来访问所有传入的参数。</p>
<p>在TypeScript里，你可以把所有参数收集到一个变量里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, ...restOfName: string[]) &#123;</div><div class="line">  return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var employeeName = buildName(&quot;Joseph&quot;, &quot;Samuel&quot;, &quot;Lucas&quot;, &quot;MacKinzie&quot;);</div></pre></td></tr></table></figure></p>
<p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（…）后面给定的名字，你可以在函数体内使用这个数组。</p>
<p>这个省略号也会在带有剩余参数的函数类型定义上使用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function buildName(firstName: string, ...restOfName: string[]) &#123;</div><div class="line">  return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var buildNameFun: (fname: string, ...rest: string[]) =&gt; string = buildName;</div></pre></td></tr></table></figure></p>
<h3 id="Lambda表达式和使用this"><a href="#Lambda表达式和使用this" class="headerlink" title="Lambda表达式和使用this"></a>Lambda表达式和使用this</h3><p>JavaScript里this的工作机制对JavaScript程序员来说已经是老生常谈了。 的确，学会如何使用它绝对是JavaScript编程中的一件大事。 由于TypeScript是JavaScript的超集，TypeScript程序员也需要弄清this工作机制并且当有bug的时候能够找出错误所在。 this的工作机制可以单独写一本书了，并确已有人这么做了。在这里，我们只介绍一些基础知识。</p>
<p>JavaScript里，this的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 众所周知这不是一件很简单的事，特别是函数当做回调函数使用的时候。</p>
<p>下面看一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var deck = &#123;</div><div class="line">    suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],</div><div class="line">    cards: Array(52),</div><div class="line">    createCardPicker: function() &#123;</div><div class="line">        return function() &#123;</div><div class="line">            var pickedCard = Math.floor(Math.random() * 52);</div><div class="line">            var pickedSuit = Math.floor(pickedCard / 13);</div><div class="line"></div><div class="line">            return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var cardPicker = deck.createCardPicker();</div><div class="line">var pickedCard = cardPicker();</div><div class="line"></div><div class="line">alert(&quot;card: &quot; + pickedCard.card + &quot; of &quot; + pickedCard.suit);</div></pre></td></tr></table></figure></p>
<p>如果我们运行这个程序，会发现它并没有弹出对话框而是报错了。 因为createCardPicker返回的函数里的this被设置成了window而不是deck对象。 当你调用cardPicker()时会发生这种情况。这里没有对this进行动态绑定因此为window。（注意在严格模式下，会是undefined而不是window）。</p>
<p>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。</p>
<p>我们把函数表达式变为使用lambda表达式（ () =&gt; {} ）。 这样就会在函数创建的时候就指定了‘this’值，而不是在函数调用的时候。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var deck = &#123;</div><div class="line">    suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],</div><div class="line">    cards: Array(52),</div><div class="line">    createCardPicker: function() &#123;</div><div class="line">        // Notice: the line below is now a lambda, allowing us to capture `this` earlier</div><div class="line">        return () =&gt; &#123;</div><div class="line">            var pickedCard = Math.floor(Math.random() * 52);</div><div class="line">            var pickedSuit = Math.floor(pickedCard / 13);</div><div class="line"></div><div class="line">            return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var cardPicker = deck.createCardPicker();</div><div class="line">var pickedCard = cardPicker();</div><div class="line"></div><div class="line">alert(&quot;card: &quot; + pickedCard.card + &quot; of &quot; + pickedCard.suit);</div><div class="line">为了解更多关于this的信息，请阅读Yahuda Katz的Understanding JavaScript Function Invocation and &quot;this&quot;。</div></pre></td></tr></table></figure></p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var suits = [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;];</div><div class="line"></div><div class="line">function pickCard(x): any &#123;</div><div class="line">    // Check to see if we&apos;re working with an object/array</div><div class="line">    // if so, they gave us the deck and we&apos;ll pick the card</div><div class="line">    if (typeof x == &quot;object&quot;) &#123;</div><div class="line">        var pickedCard = Math.floor(Math.random() * x.length);</div><div class="line">        return pickedCard;</div><div class="line">    &#125;</div><div class="line">    // Otherwise just let them pick the card</div><div class="line">    else if (typeof x == &quot;number&quot;) &#123;</div><div class="line">        var pickedSuit = Math.floor(x / 13);</div><div class="line">        return &#123; suit: suits[pickedSuit], card: x % 13 &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myDeck = [&#123; suit: &quot;diamonds&quot;, card: 2 &#125;, &#123; suit: &quot;spades&quot;, card: 10 &#125;, &#123; suit: &quot;hearts&quot;, card: 4 &#125;];</div><div class="line">var pickedCard1 = myDeck[pickCard(myDeck)];</div><div class="line">alert(&quot;card: &quot; + pickedCard1.card + &quot; of &quot; + pickedCard1.suit);</div><div class="line"></div><div class="line">var pickedCard2 = pickCard(15);</div><div class="line">alert(&quot;card: &quot; + pickedCard2.card + &quot; of &quot; + pickedCard2.suit);</div></pre></td></tr></table></figure></p>
<p>pickCard方法根据传入参数的不同会返回两种不同的类型。 如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。 如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。</p>
<p>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载pickCard函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var suits = [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;];</div><div class="line"></div><div class="line">function pickCard(x: &#123;suit: string; card: number; &#125;[]): number;</div><div class="line">function pickCard(x: number): &#123;suit: string; card: number; &#125;;</div><div class="line">function pickCard(x): any &#123;</div><div class="line">    // Check to see if we&apos;re working with an object/array</div><div class="line">    // if so, they gave us the deck and we&apos;ll pick the card</div><div class="line">    if (typeof x == &quot;object&quot;) &#123;</div><div class="line">        var pickedCard = Math.floor(Math.random() * x.length);</div><div class="line">        return pickedCard;</div><div class="line">    &#125;</div><div class="line">    // Otherwise just let them pick the card</div><div class="line">    else if (typeof x == &quot;number&quot;) &#123;</div><div class="line">        var pickedSuit = Math.floor(x / 13);</div><div class="line">        return &#123; suit: suits[pickedSuit], card: x % 13 &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var myDeck = [&#123; suit: &quot;diamonds&quot;, card: 2 &#125;, &#123; suit: &quot;spades&quot;, card: 10 &#125;, &#123; suit: &quot;hearts&quot;, card: 4 &#125;];</div><div class="line">var pickedCard1 = myDeck[pickCard(myDeck)];</div><div class="line">alert(&quot;card: &quot; + pickedCard1.card + &quot; of &quot; + pickedCard1.suit);</div><div class="line"></div><div class="line">var pickedCard2 = pickCard(15);</div><div class="line">alert(&quot;card: &quot; + pickedCard2.card + &quot; of &quot; + pickedCard2.suit);</div></pre></td></tr></table></figure></p>
<p>这样改变后，重载的pickCard函数在调用的时候会进行正确的类型检查。</p>
<p>为了让编译器能够选择正确的检查类型，它与JavaScript里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p>
<p>注意，function pickCard(x): any并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用pickCard会产生错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;转载：《TypeScript-中文入门教程》-8、函数&quot;&gt;&lt;a href=&quot;#转载：《TypeScript-中文入门教程》-8、函数&quot; class=&quot;headerlink&quot; title=&quot;转载：《TypeScript 中文入门教程》 8、函数&quot;&gt;&lt;/a&gt;转载：《TypeScript 中文入门教程》 8、函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;版权&lt;br&gt;文章转载自：&lt;a href=&quot;https://github.com/zhongsp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/zhongsp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义行为的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易的使用。&lt;/p&gt;
&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux-ubuntu-ansible</title>
    <link href="http://sunhao.win/articles/linux-ubuntu-ansible.html"/>
    <id>http://sunhao.win/articles/linux-ubuntu-ansible.html</id>
    <published>2017-06-07T03:43:24.000Z</published>
    <updated>2017-06-07T03:50:43.011Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fatal error: openssl/opensslv.h: No such file or directory</div><div class="line">fatal error: ffi.h: No such file or directory</div><div class="line"></div><div class="line"></div><div class="line">apt-get install libffi-dev</div><div class="line">apt-get install libssl-dev</div></pre></td></tr></table></figure>
<p>ansible 2.4.0<br>  config file =<br>  configured module search path = [u’/root/.ansible/plugins/modules’, u’/usr/share/ansible/plugins/modules’]<br>  ansible python module location = /usr/local/lib/python2.7/dist-packages/ansible-2.4.0-py2.7.egg/ansible<br>  executable location = /usr/local/bin/ansible<br>  python version = 2.7.12 (default, Nov 19 2016, 06:48:10) [GCC 5.4.0 20160609]</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fatal error: openssl/opensslv.h: No such file or directory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fatal error: ffi.h: No such file or directory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libffi-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libssl-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ansible 2.4.0&lt;br&gt;  config file =&lt;br&gt;  configured module search path = [u’/root/.ansible/plugins/modules’, u’/usr/share/ansible/plugins/modules’]&lt;br&gt;  ansible python module location = /usr/local/lib/python2.7/dist-packages/ansible-2.4.0-py2.7.egg/ansible&lt;br&gt;  executable location = /usr/local/bin/ansible&lt;br&gt;  python version = 2.7.12 (default, Nov 19 2016, 06:48:10) [GCC 5.4.0 20160609]&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux-ubuntu-samba配置</title>
    <link href="http://sunhao.win/articles/linux-ubuntu-samba.html"/>
    <id>http://sunhao.win/articles/linux-ubuntu-samba.html</id>
    <published>2017-06-06T08:46:09.000Z</published>
    <updated>2017-06-06T09:27:54.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先下载服务器包"><a href="#首先下载服务器包" class="headerlink" title="首先下载服务器包"></a>首先下载服务器包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#sudo apt-get install samba</div><div class="line"></div><div class="line">启动Samba服务器只需执行如下命令：</div><div class="line">#sudo /etc/init.d/samba start</div><div class="line"></div><div class="line">关闭Samba服务器：</div><div class="line">#sudo /etc/init.d/samba stop</div><div class="line"></div><div class="line">重新启动Samba服务器：</div><div class="line">#sudo /etc/init.d/samba restart</div><div class="line"></div><div class="line"></div><div class="line">root     15043  0.0  0.5 240004  5936 ?        Ss   16:22   0:00 /usr/sbin/nmbd -D</div><div class="line">root     15086  0.0  1.0 332036 10924 ?        Ss   16:22   0:00 /usr/sbin/smbd -D</div><div class="line">root     15093  0.0  0.5 329808  5736 ?        S    16:22   0:00 /usr/sbin/smbd -D</div><div class="line">root     15100  0.0  0.6 332036  6312 ?        S    16:22   0:00 /usr/sbin/smbd -D</div><div class="line">root     15157  0.0  1.5 344944 15648 ?        S    16:27   0:00 /usr/sbin/smbd -D</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#vim /etc/samba/smb.conf   </div><div class="line"></div><div class="line"></div><div class="line"># 最后添加</div><div class="line">[yun]</div><div class="line">	comment = yun</div><div class="line">	path=/home/sunhao</div><div class="line">	public=yes</div><div class="line">	writable=yes</div></pre></td></tr></table></figure>
<h3 id="windows访问在文件夹的地址栏-输入-yun-就可以了-其中-代表ip地址"><a href="#windows访问在文件夹的地址栏-输入-yun-就可以了-其中-代表ip地址" class="headerlink" title="windows访问在文件夹的地址栏 输入    \...\yun  就可以了 其中*代表ip地址"></a>windows访问在文件夹的地址栏 输入    \<em>.</em>.<em>.</em>\yun  就可以了 其中*代表ip地址</h3><h3 id="默认这样是没有密码的，访问不安全，所以我们需要添加用户组，虚拟账户和密码"><a href="#默认这样是没有密码的，访问不安全，所以我们需要添加用户组，虚拟账户和密码" class="headerlink" title="默认这样是没有密码的，访问不安全，所以我们需要添加用户组，虚拟账户和密码"></a>默认这样是没有密码的，访问不安全，所以我们需要添加用户组，虚拟账户和密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># smbpasswd -a sunhao //-a 代表新添加一个用户sunhao</div><div class="line">New SMB password: </div><div class="line"></div><div class="line"></div><div class="line">Retype new SMB password:</div><div class="line"></div><div class="line">chmod 755 /home/sunhao //修改文件权限</div><div class="line">chown sunhao:yun /home/sunhao</div></pre></td></tr></table></figure>
<p>修改最后一行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">　[yun] </div><div class="line"></div><div class="line"></div><div class="line">　　comment = yun</div><div class="line"></div><div class="line"></div><div class="line">　　path = /home/yun/ </div><div class="line"></div><div class="line"></div><div class="line">　　create mask = 0664</div><div class="line"></div><div class="line"></div><div class="line">　　#create mask是用户创建文件时的权限掩码;对用户来可读可写，对用户组可读可写，对其它用户可读; </div><div class="line"></div><div class="line"></div><div class="line">　　directory mask = 0775 </div><div class="line"></div><div class="line"></div><div class="line">　　#directory mask 是用来设置用户创建目录时的权限掩码，意思是对于用户和用户组可读可写，对其它用户可读可执行; </div><div class="line"></div><div class="line"></div><div class="line">　　writeable = yes </div><div class="line"></div><div class="line"></div><div class="line">　　valid users = sunhao </div><div class="line"></div><div class="line"></div><div class="line">　　browseable = yes</div></pre></td></tr></table></figure></p>
<p>//这个时候重启下服务器，用window登陆 就提示要输入账号密码了。</p>
<h3 id="有时候我们需要linux登陆"><a href="#有时候我们需要linux登陆" class="headerlink" title="有时候我们需要linux登陆"></a>有时候我们需要linux登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install smbclient //下载smbclient</div></pre></td></tr></table></figure>
<p>我们可以直接挂载，或者通过命令行操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mount -t cifs -o username=sunhao,password=sunhao521 //47.92.*.*/yun /www/ //这段代码是用于挂载</div><div class="line"></div><div class="line">smbclient //47.92.*.*/yun -U sunhao%sunhao521 //进入命令行操作</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先下载服务器包&quot;&gt;&lt;a href=&quot;#首先下载服务器包&quot; class=&quot;headerlink&quot; title=&quot;首先下载服务器包&quot;&gt;&lt;/a&gt;首先下载服务器包&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#sudo apt-get install samba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;启动Samba服务器只需执行如下命令：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#sudo /etc/init.d/samba start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;关闭Samba服务器：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#sudo /etc/init.d/samba stop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;重新启动Samba服务器：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#sudo /etc/init.d/samba restart&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root     15043  0.0  0.5 240004  5936 ?        Ss   16:22   0:00 /usr/sbin/nmbd -D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root     15086  0.0  1.0 332036 10924 ?        Ss   16:22   0:00 /usr/sbin/smbd -D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root     15093  0.0  0.5 329808  5736 ?        S    16:22   0:00 /usr/sbin/smbd -D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root     15100  0.0  0.6 332036  6312 ?        S    16:22   0:00 /usr/sbin/smbd -D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root     15157  0.0  1.5 344944 15648 ?        S    16:27   0:00 /usr/sbin/smbd -D&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="http://sunhao.win/tags/ubuntu/"/>
    
      <category term="samba" scheme="http://sunhao.win/tags/samba/"/>
    
  </entry>
  
  <entry>
    <title>linux-lsyncd同步备份文件</title>
    <link href="http://sunhao.win/articles/linux-lsyncd.html"/>
    <id>http://sunhao.win/articles/linux-lsyncd.html</id>
    <published>2017-06-06T01:57:04.000Z</published>
    <updated>2017-06-06T02:29:24.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直搞服务器文件备份，思量再三，rsync inotify-tools配置太麻烦，索性转成lsyncd。配置简单，运行快。效率提高不少。</p>
<p>直接打开<a href="https://github.com/axkibe/lsyncd/releases下载安装就好。" target="_blank" rel="external">https://github.com/axkibe/lsyncd/releases下载安装就好。</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># cmake -DCMAKE_INSTALL_PREFIX=/usr/local/</div><div class="line"># make &amp;&amp; make install</div><div class="line"></div><div class="line"></div><div class="line">--&quot;--&quot;是lua的注释标记</div><div class="line">--mkdir /usr/local/lsyncd</div><div class="line">--cd /usr/local/lsyncd</div><div class="line">--vim lsyncd.lua    --注意：lua语法的规则</div><div class="line">--vim lsyncd.sunhao.conf    --注意：后缀换成conf也可以，就是一个配置文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">--文件配置语法lsyncd.sunhao.conf</div><div class="line"></div><div class="line">settings&#123;</div><div class="line">    logfile = &quot;/var/log/lsyncd.log&quot;,     --日志路径</div><div class="line">    statusFile = &quot;/var/log/lsyncd-status.log&quot;, --状态文件</div><div class="line">    pidfile = &quot;/var/run/lsyncd.pid&quot;, --pid文件路径</div><div class="line">    statusInterval = 1,  --状态文件写入最短时间</div><div class="line">    nodaemon = false,    --daemon运行</div><div class="line">    maxProcesses = 1,    --最大进程</div><div class="line">    maxDelays = 1        --最大延迟</div><div class="line">&#125;</div><div class="line">--多host同步</div><div class="line">servers = &#123;</div><div class="line">    &quot;192.168.1.10&quot;, --前置服务器</div><div class="line">    --&quot;192.168.1.13&quot; --静态服务器</div><div class="line">&#125;</div><div class="line">--同步规则</div><div class="line">for _, server in ipairs(servers) do    --迭代servers</div><div class="line">    sync&#123;</div><div class="line">             </div><div class="line">            default.rsyncssh,      --默认rsync+ssh,rsync版本需要升级3以上版本</div><div class="line">        source = &quot;/www/apache2/sunhao/html/&quot;,     --源目录</div><div class="line">        delete = true,          </div><div class="line">        host = server,         </div><div class="line">        targetdir = &quot;/www/sunhao/html/&quot;,  --目标目录</div><div class="line">        exclude=&#123;                 </div><div class="line">            &quot;.txt&quot;             --排除</div><div class="line">        &#125;,</div><div class="line">        rsync = &#123;</div><div class="line">            binary = &quot;/usr/bin/rsync&quot;, --之前要装好rsync</div><div class="line">            archive = true,    --归档</div><div class="line">            compress = false,  --压缩</div><div class="line">            owner = true,      --属主</div><div class="line">            perms = true,      --权限</div><div class="line">            whole_file = false</div><div class="line">        &#125;,</div><div class="line">        ssh = &#123;</div><div class="line">            port = 22</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">end</div><div class="line"></div><div class="line">--执行脚本 lsyncd -log Exec /usr/local/lsyncd/lsyncd.sunhao.conf</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直搞服务器文件备份，思量再三，rsync inotify-tools配置太麻烦，索性转成lsyncd。配置简单，运行快。效率提高不少。&lt;/p&gt;
&lt;p&gt;直接打开&lt;a href=&quot;https://github.com/axkibe/lsyncd/releases下载安装就
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux" scheme="http://sunhao.win/tags/linux/"/>
    
      <category term="lsyncd" scheme="http://sunhao.win/tags/lsyncd/"/>
    
  </entry>
  
  <entry>
    <title>php在现有环境下编译安装zlib等扩展</title>
    <link href="http://sunhao.win/articles/php-install-zlib.html"/>
    <id>http://sunhao.win/articles/php-install-zlib.html</id>
    <published>2017-05-31T07:58:10.000Z</published>
    <updated>2017-06-05T03:01:24.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响"><a href="#安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响" class="headerlink" title="安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响"></a>安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响</h3><h3 id="首先进源码的的扩展包"><a href="#首先进源码的的扩展包" class="headerlink" title="首先进源码的的扩展包"></a>首先进源码的的扩展包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@BBS no-debug-zts-20131226]# cd //usr/src/temp/lamp/php-5.6.15/ext</div><div class="line">[root@BBS ext]# cd zlib/</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="用phpize提示报错Cannot-find-config-m4"><a href="#用phpize提示报错Cannot-find-config-m4" class="headerlink" title="用phpize提示报错Cannot find config.m4."></a>用phpize提示报错Cannot find config.m4.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@BBS zlib]# ls</div><div class="line">config0.m4  CREDITS      php_zlib.def  tests   zlib.dsp       zlib_fopen_wrapper.c</div><div class="line">config.w32  package.xml  php_zlib.h    zlib.c  zlib_filter.c  zlib_win32_howto.txt</div><div class="line"></div><div class="line">[root@BBS zlib]# phpize</div><div class="line">Cannot find config.m4. </div><div class="line">Make sure that you run &apos;/usr/local/php/bin/phpize&apos; in the top level source directory of the module</div><div class="line"></div><div class="line">[root@BBS zlib]# /usr/local/php/bin/phpize </div><div class="line">Cannot find config.m4. </div><div class="line">Make sure that you run &apos;/usr/local/php/bin/phpize&apos; in the top level source directory of the module</div></pre></td></tr></table></figure>
<h3 id="ls一下发现原来config名字改成了config0-cp过来一份。"><a href="#ls一下发现原来config名字改成了config0-cp过来一份。" class="headerlink" title="ls一下发现原来config名字改成了config0.  cp过来一份。"></a>ls一下发现原来config名字改成了config0.  cp过来一份。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@BBS zlib]# ls config*</div><div class="line">config0.m4  config.w32</div><div class="line">[root@BBS zlib]# cp config0.m4 config.m4</div><div class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local/</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="成功运行编译好环境"><a href="#成功运行编译好环境" class="headerlink" title="成功运行编译好环境"></a>成功运行编译好环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@BBS zlib]# /usr/local/php/bin/phpize </div><div class="line">Configuring for:</div><div class="line">PHP Api Version:         20131106</div><div class="line">Zend Module Api No:      20131226</div><div class="line">Zend Extension Api No:   220131226</div></pre></td></tr></table></figure>
<h3 id="找到以前的配置文件-配置编译安装"><a href="#找到以前的配置文件-配置编译安装" class="headerlink" title="找到以前的配置文件,配置编译安装"></a>找到以前的配置文件,配置编译安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">[root@BBS zlib]# locate php-config</div><div class="line">/usr/local/php/bin/php-config</div><div class="line">/usr/local/php/php/man/man1/php-config.1</div><div class="line">[root@BBS zlib]# ./configure --with-php-config=/usr/local/php/bin/php-config</div><div class="line">checking for grep that handles long lines and -e... /bin/grep</div><div class="line">checking for egrep... /bin/grep -E</div><div class="line">checking for a sed that does not truncate output... /bin/sed</div><div class="line">checking for cc... cc</div><div class="line">checking for C compiler default output file name... a.out</div><div class="line">checking whether the C compiler works... yes</div><div class="line">checking whether we are cross compiling... no</div><div class="line">checking for suffix of executables... </div><div class="line">checking for suffix of object files... o</div><div class="line">checking whether we are using the GNU C compiler... yes</div><div class="line">checking whether cc accepts -g... yes</div><div class="line">checking for cc option to accept ISO C89... none needed</div><div class="line">checking how to run the C preprocessor... cc -E</div><div class="line">checking for icc... no</div><div class="line">checking for suncc... no</div><div class="line">checking whether cc understands -c and -o together... yes</div><div class="line">checking for system library directory... lib</div><div class="line">checking if compiler supports -R... no</div><div class="line">checking if compiler supports -Wl,-rpath,... yes</div><div class="line">checking build system type... x86_64-unknown-linux-gnu</div><div class="line">checking host system type... x86_64-unknown-linux-gnu</div><div class="line">checking target system type... x86_64-unknown-linux-gnu</div><div class="line">checking for PHP prefix... /usr/local/php</div><div class="line">checking for PHP includes... -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib</div><div class="line">checking for PHP extension directory... /usr/local/php/lib/php/extensions/no-debug-zts-20131226</div><div class="line">checking for PHP installed headers prefix... /usr/local/php/include/php</div><div class="line">checking if debug is enabled... no</div><div class="line">checking if zts is enabled... no</div><div class="line">checking for re2c... no</div><div class="line">configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.</div><div class="line">checking for gawk... gawk</div><div class="line">checking for ZLIB support... yes, shared</div><div class="line">checking if the location of ZLIB install directory is defined... no</div><div class="line">checking for zlib version &gt;= 1.2.0.4... 1.2.3</div><div class="line">checking for gzgets in -lz... yes</div><div class="line">checking for ld used by cc... /usr/bin/ld</div><div class="line">checking if the linker (/usr/bin/ld) is GNU ld... yes</div><div class="line">checking for /usr/bin/ld option to reload object files... -r</div><div class="line">checking for BSD-compatible nm... /usr/bin/nm -B</div><div class="line">checking whether ln -s works... yes</div><div class="line">checking how to recognize dependent libraries... pass_all</div><div class="line">checking for ANSI C header files... yes</div><div class="line">checking for sys/types.h... yes</div><div class="line">checking for sys/stat.h... yes</div><div class="line">checking for stdlib.h... yes</div><div class="line">checking for string.h... yes</div><div class="line">checking for memory.h... yes</div><div class="line">checking for strings.h... yes</div><div class="line">checking for inttypes.h... yes</div><div class="line">checking for stdint.h... yes</div><div class="line">checking for unistd.h... yes</div><div class="line">checking dlfcn.h usability... yes</div><div class="line">checking dlfcn.h presence... yes</div><div class="line">checking for dlfcn.h... yes</div><div class="line">checking the maximum length of command line arguments... 1966080</div><div class="line">checking command to parse /usr/bin/nm -B output from cc object... ok</div><div class="line">checking for objdir... .libs</div><div class="line">checking for ar... ar</div><div class="line">checking for ranlib... ranlib</div><div class="line">checking for strip... strip</div><div class="line">checking if cc supports -fno-rtti -fno-exceptions... no</div><div class="line">checking for cc option to produce PIC... -fPIC</div><div class="line">checking if cc PIC flag -fPIC works... yes</div><div class="line">checking if cc static flag -static works... no</div><div class="line">checking if cc supports -c -o file.o... yes</div><div class="line">checking whether the cc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes</div><div class="line">checking whether -lc should be explicitly linked in... no</div><div class="line">checking dynamic linker characteristics... GNU/Linux ld.so</div><div class="line">checking how to hardcode library paths into programs... immediate</div><div class="line">checking whether stripping libraries is possible... yes</div><div class="line">checking if libtool supports shared libraries... yes</div><div class="line">checking whether to build shared libraries... yes</div><div class="line">checking whether to build static libraries... no</div><div class="line"></div><div class="line">creating libtool</div><div class="line">appending configuration tag &quot;CXX&quot; to libtool</div><div class="line">configure: creating ./config.status</div><div class="line">config.status: creating config.h</div><div class="line">[root@BBS zlib]# make &amp;&amp; make install</div><div class="line">/bin/sh //usr/src/temp/lamp/php-5.6.15/ext/zlib/libtool --mode=compile cc  -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib  -DHAVE_CONFIG_H  -g -O2   -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib.c -o zlib.lo </div><div class="line">mkdir .libs</div><div class="line"> cc -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib -DHAVE_CONFIG_H -g -O2 -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib.c  -fPIC -DPIC -o .libs/zlib.o</div><div class="line">//usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib.c:1035: warning: initialization from incompatible pointer type</div><div class="line">/bin/sh //usr/src/temp/lamp/php-5.6.15/ext/zlib/libtool --mode=compile cc  -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib  -DHAVE_CONFIG_H  -g -O2   -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib_fopen_wrapper.c -o zlib_fopen_wrapper.lo </div><div class="line"> cc -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib -DHAVE_CONFIG_H -g -O2 -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib_fopen_wrapper.c  -fPIC -DPIC -o .libs/zlib_fopen_wrapper.o</div><div class="line">/bin/sh //usr/src/temp/lamp/php-5.6.15/ext/zlib/libtool --mode=compile cc  -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib  -DHAVE_CONFIG_H  -g -O2   -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib_filter.c -o zlib_filter.lo </div><div class="line"> cc -I. -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib -DHAVE_CONFIG_H -g -O2 -c //usr/src/temp/lamp/php-5.6.15/ext/zlib/zlib_filter.c  -fPIC -DPIC -o .libs/zlib_filter.o</div><div class="line">/bin/sh //usr/src/temp/lamp/php-5.6.15/ext/zlib/libtool --mode=link cc -DPHP_ATOM_INC -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/include -I//usr/src/temp/lamp/php-5.6.15/ext/zlib/main -I//usr/src/temp/lamp/php-5.6.15/ext/zlib -I/usr/local/php/include/php -I/usr/local/php/include/php/main -I/usr/local/php/include/php/TSRM -I/usr/local/php/include/php/Zend -I/usr/local/php/include/php/ext -I/usr/local/php/include/php/ext/date/lib  -DHAVE_CONFIG_H  -g -O2   -o zlib.la -export-dynamic -avoid-version -prefer-pic -module -rpath //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules  zlib.lo zlib_fopen_wrapper.lo zlib_filter.lo -lz</div><div class="line">cc -shared  .libs/zlib.o .libs/zlib_fopen_wrapper.o .libs/zlib_filter.o  -lz  -Wl,-soname -Wl,zlib.so -o .libs/zlib.so</div><div class="line">creating zlib.la</div><div class="line">(cd .libs &amp;&amp; rm -f zlib.la &amp;&amp; ln -s ../zlib.la zlib.la)</div><div class="line">/bin/sh //usr/src/temp/lamp/php-5.6.15/ext/zlib/libtool --mode=install cp ./zlib.la //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules</div><div class="line">cp ./.libs/zlib.so //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules/zlib.so</div><div class="line">cp ./.libs/zlib.lai //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules/zlib.la</div><div class="line">PATH=&quot;$PATH:/sbin&quot; ldconfig -n //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules</div><div class="line">----------------------------------------------------------------------</div><div class="line">Libraries have been installed in:</div><div class="line">   //usr/src/temp/lamp/php-5.6.15/ext/zlib/modules</div><div class="line"></div><div class="line">If you ever happen to want to link against installed libraries</div><div class="line">in a given directory, LIBDIR, you must either use libtool, and</div><div class="line">specify the full pathname of the library, or use the `-LLIBDIR&apos;</div><div class="line">flag during linking and do at least one of the following:</div><div class="line">   - add LIBDIR to the `LD_LIBRARY_PATH&apos; environment variable</div><div class="line">     during execution</div><div class="line">   - add LIBDIR to the `LD_RUN_PATH&apos; environment variable</div><div class="line">     during linking</div><div class="line">   - use the `-Wl,--rpath -Wl,LIBDIR&apos; linker flag</div><div class="line">   - have your system administrator add LIBDIR to `/etc/ld.so.conf&apos;</div><div class="line"></div><div class="line">See any operating system documentation about shared libraries for</div><div class="line">more information, such as the ld(1) and ld.so(8) manual pages.</div><div class="line">----------------------------------------------------------------------</div><div class="line"></div><div class="line">Build complete.</div><div class="line">Don&apos;t forget to run &apos;make test&apos;.</div><div class="line"></div><div class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-zts-20131226/</div></pre></td></tr></table></figure>
<h3 id="编辑php-ini添加extension-”zlib-so”"><a href="#编辑php-ini添加extension-”zlib-so”" class="headerlink" title="编辑php.ini添加extension=”zlib.so”"></a>编辑php.ini添加extension=”zlib.so”</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响&quot;&gt;&lt;a href=&quot;#安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响&quot; class=&quot;headerlink&quot; title=&quot;安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响&quot;&gt;&lt;/a&gt;安装的时候是在扩展包里面进行编译安装，所以对现有php环境没有影响&lt;/h3&gt;&lt;h3 id=&quot;首先进源码的的扩展包&quot;&gt;&lt;a href=&quot;#首先进源码的的扩展包&quot; class=&quot;headerlink&quot; title=&quot;首先进源码的的扩展包&quot;&gt;&lt;/a&gt;首先进源码的的扩展包&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@BBS no-debug-zts-20131226]# cd //usr/src/temp/lamp/php-5.6.15/ext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@BBS ext]# cd zlib/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://sunhao.win/categories/php/"/>
    
    
      <category term="zlib" scheme="http://sunhao.win/tags/zlib/"/>
    
      <category term="编译" scheme="http://sunhao.win/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>linux用nfs共享目录文档</title>
    <link href="http://sunhao.win/articles/linux-nfs.html"/>
    <id>http://sunhao.win/articles/linux-nfs.html</id>
    <published>2017-05-26T03:22:27.000Z</published>
    <updated>2017-06-06T01:56:02.393Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们分成两台主机，一台web-html nfs客户端ip为192.168.1.100。一台web-php nfs服务端ip为192.168.1.101。</p>
<h3 id="首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装"><a href="#首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装" class="headerlink" title="首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装"></a>首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装</h3><p>一般系统都安装好装好了，没有就安装下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">service portmap status</div><div class="line"></div><div class="line">service rpcbind status</div><div class="line"></div><div class="line">yum install nfs-utils //nfs软件</div></pre></td></tr></table></figure>
<h3 id="登陆客户端查看-nginx的id号"><a href="#登陆客户端查看-nginx的id号" class="headerlink" title="登陆客户端查看 nginx的id号"></a>登陆客户端查看 nginx的id号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@Web-html nfs]# id nginx</div><div class="line"></div><div class="line">uid=501(nginx) gid=501(nginx) groups=501(nginx)</div></pre></td></tr></table></figure>
<h3 id="登陆服务端，编辑-etc-exports-格式如下"><a href="#登陆服务端，编辑-etc-exports-格式如下" class="headerlink" title="登陆服务端，编辑/etc/exports,格式如下"></a>登陆服务端，编辑/etc/exports,格式如下</h3><p>&lt;共享目录&gt; 客户端1(选项) [客户端2(选项) …]<br>共享目录：NFS共享给客户机的目录。<br>客户端：网络中可以访问此目录的主机。多个客户端以空格分隔。<br>选项：设置目录的访问权限、用户映射等，多个选项以逗号分隔。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/www/apache2/sunhao/html 192.168.1.0/24(ro,sync,all_squash,anonuid=501,anongid=501)</div></pre></td></tr></table></figure></p>
<pre><code>选项说明
ro：共享目录只读；
rw：共享目录可读可写；
all_squash：所有访问用户都映射为匿名用户或用户组；
no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；
root_squash（默认）：将来访的root用户映射为匿名用户或用户组；
no_root_squash：来访的root用户保持root帐号权限；
anonuid=&lt;UID&gt;：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）；
anongid=&lt;GID&gt;：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）；
secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器；
insecure：允许客户端从大于1024的tcp/ip端口连接服务器；
sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性；
async：将数据先保存在内存缓冲区中，必要时才写入磁盘；
wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率；
no_wdelay：若有写操作则立即执行，应与sync配合使用；
subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限；
no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率；
</code></pre><h3 id="重启nfs挂载成功"><a href="#重启nfs挂载成功" class="headerlink" title="重启nfs挂载成功"></a>重启nfs挂载成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">service nfs start</div><div class="line"></div><div class="line">exportfs -rv //nfs提供的检查挂载命令</div><div class="line"></div><div class="line">[root@Web-php ~]# ps -ef | grep nfs</div><div class="line">root      97898      2  0 17:21 ?        00:00:00 [nfsd4]</div><div class="line">root      97899      2  0 17:21 ?        00:00:00 [nfsd4_callbacks]</div><div class="line">root      97900      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97901      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97902      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97903      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97904      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97905      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97906      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      97907      2  0 17:21 ?        00:00:00 [nfsd]</div><div class="line">root      98036  98010  0 17:23 pts/2    00:00:00 grep nfs</div></pre></td></tr></table></figure>
<p>exportfs</p>
<pre><code>不重启nfs服务应用更新，相关选项如下：
-a 全部挂载或卸载 /etc/exports中的内容
-r 重新读取/etc/exports 中的信息 ，并同步更新/etc/exports、/var/lib/nfs/xtab
-u 卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录）
-v 在export的时候，将详细的信息输出到屏幕上。
</code></pre><h3 id="showmount-e-登陆服务器端，查看挂载的目录"><a href="#showmount-e-登陆服务器端，查看挂载的目录" class="headerlink" title="showmount -e  登陆服务器端，查看挂载的目录"></a>showmount -e  登陆服务器端，查看挂载的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@Web-html]# showmount -e 192.168.1.101</div><div class="line">Export list for 192.168.1.101:</div><div class="line">/www/apache2/sunhao/html 192.168.1.0/24</div></pre></td></tr></table></figure>
<p>如果提示失败，出现下面字样。说明hosts出现问题，查看后发现没有添加服务端的hosts。vim添加下就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@web-html ~]# showmount -e</div><div class="line">clnt_create: RPC: Program not registered</div><div class="line">[root@web-html ~]# more /etc/hosts</div><div class="line">127.0.0.1	localhost.example localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line"></div><div class="line">192.168.1.100	web-html	</div><div class="line">[root@web-html ~]#</div></pre></td></tr></table></figure></p>
<p>如果还是不行，就关闭iptables或者修改下面介绍的配置文件。</p>
<h3 id="登陆客户端服务器-挂载远程服务器。"><a href="#登陆客户端服务器-挂载远程服务器。" class="headerlink" title="登陆客户端服务器 挂载远程服务器。"></a>登陆客户端服务器 挂载远程服务器。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mount -t nfs 192.168.1.101:/www/apache2/sunhao/html/  /www/sunhao/html/</div><div class="line"></div><div class="line">[root@web-html www]# df -h</div><div class="line">Filesystem            Size  Used Avail Use% Mounted on</div><div class="line">/dev/mapper/VolGroup-lv_root</div><div class="line">                       50G  4.4G   43G  10% /</div><div class="line">tmpfs                 3.9G     0  3.9G   0% /dev/shm</div><div class="line">/dev/sda1             477M   42M  411M  10% /boot</div><div class="line">/dev/mapper/VolGroup-lv_home</div><div class="line">                      5.5G  993M  4.2G  19% /home</div><div class="line">/dev/mapper/VG_data-LV_data</div><div class="line">                      196G   55G  132G  30% /www</div><div class="line">192.168.1.101:/www/apache2/sunhao/html</div><div class="line">                      196G  3.4G  183G   2% /www/ceshi</div></pre></td></tr></table></figure>
<p>永久挂载和自动挂载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/fstab</div><div class="line">192.168.1.101:/www/apache2/sunhao/html/  /www/sunhao/html/ nfs defaults</div><div class="line">保存退出</div><div class="line">mount -a</div><div class="line">// 自动挂载可以用autofs</div></pre></td></tr></table></figure>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">umount /root/ceshi</div><div class="line"></div><div class="line">发现自己在这个目录 所以无法卸载,退出当期那目录就好</div></pre></td></tr></table></figure>
<h3 id="当服务端开启iptables时候，客户端访问超时，这个时候需要修改nfs的配置"><a href="#当服务端开启iptables时候，客户端访问超时，这个时候需要修改nfs的配置" class="headerlink" title="当服务端开启iptables时候，客户端访问超时，这个时候需要修改nfs的配置"></a>当服务端开启iptables时候，客户端访问超时，这个时候需要修改nfs的配置</h3><p>我们分析下原理</p>
<p>nfs本身不带网络传输的。都是通过rpc的111端口进行通信。</p>
<p>（1）客户端会向服务器端的RPC（port 111）发出NFS文件存取功能的询问请求。<br>（2）服务器端找到对应的已注册的NFS，默认nfsd2049 daemon端口后会回报给客户端。<br>（3）客户端了解正确的端口后，就可以直接与NFS守护(2049)进程来联机</p>
<p>所以111和2049是必须开通的</p>
<p>由于nfs服务需要开启 mountd,nfsd,nlockmgr,portmapper,rquotad这5个服务，需要将这5个服务的端口加到iptables里面</p>
<p>而nfs 和 portmapper两个服务是固定端口的，nfsd为2049，portmapper为111。其他的3个服务是用的随机端口，那就需要</p>
<p>先把这3个服务的端口设置成固定的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">[root@web-html etc]# cat /etc/sysconfig/nfs</div><div class="line">#</div><div class="line"># Define which protocol versions mountd </div><div class="line"># will advertise. The values are &quot;no&quot; or &quot;yes&quot;</div><div class="line"># with yes being the default</div><div class="line">#MOUNTD_NFS_V2=&quot;no&quot;</div><div class="line">#MOUNTD_NFS_V3=&quot;no&quot;</div><div class="line">#</div><div class="line">#</div><div class="line"># Path to remote quota server. See rquotad(8)</div><div class="line"># rquotad:处理当用户通过nfsmount到远程服务器时的配额</div><div class="line">#RQUOTAD=&quot;/usr/sbin/rpc.rquotad&quot;</div><div class="line"># Port rquotad should listen on.</div><div class="line">#RQUOTAD_PORT=875</div><div class="line"># Optinal options passed to rquotad</div><div class="line">#RPCRQUOTADOPTS=&quot;&quot;</div><div class="line">#</div><div class="line">#</div><div class="line"># Optional arguments passed to in-kernel lockd</div><div class="line">#LOCKDARG=</div><div class="line"># TCP port rpc.lockd should listen on.</div><div class="line">#LOCKD_TCPPORT=32803</div><div class="line"># UDP port rpc.lockd should listen on.</div><div class="line">#LOCKD_UDPPORT=32769</div><div class="line">#</div><div class="line">#</div><div class="line"># Optional arguments passed to rpc.nfsd. See rpc.nfsd(8)</div><div class="line"># Turn off v2 and v3 protocol support</div><div class="line">#RPCNFSDARGS=&quot;-N 2 -N 3&quot;</div><div class="line"># Turn off v4 protocol support</div><div class="line">#RPCNFSDARGS=&quot;-N 4&quot;</div><div class="line"># Number of nfs server processes to be started.</div><div class="line"># The default is 8. </div><div class="line">#RPCNFSDCOUNT=8</div><div class="line"># Stop the nfsd module from being pre-loaded</div><div class="line">#NFSD_MODULE=&quot;noload&quot;</div><div class="line"># Set V4 and NLM grace periods in seconds</div><div class="line">#</div><div class="line"># Warning, NFSD_V4_GRACE should not be less than</div><div class="line"># NFSD_V4_LEASE was on the previous boot.</div><div class="line">#</div><div class="line"># To make NFSD_V4_GRACE shorter, with active v4 clients,</div><div class="line"># first make NFSD_V4_LEASE shorter, then restart server. </div><div class="line"># This will make the clients aware of the new value. </div><div class="line"># Then NFSD_V4_GRACE can be decreased with another restart. </div><div class="line">#</div><div class="line"># When there are no active clients, changing these values </div><div class="line"># can be done in a single server restart.</div><div class="line">#</div><div class="line">#NFSD_V4_GRACE=90</div><div class="line">#NFSD_V4_LEASE=90</div><div class="line">#NLM_GRACE_PERIOD=90</div><div class="line">#</div><div class="line">#</div><div class="line">#</div><div class="line"># Optional arguments passed to rpc.mountd. See rpc.mountd(8)</div><div class="line">#RPCMOUNTDOPTS=&quot;&quot;</div><div class="line"># Port rpc.mountd should listen on.</div><div class="line"># rpc.mountd：负责NFS的档案系统，当CLIENT端通过rpc.nfsd登陆SERVER后，对clinet存取server的文件进行一系列的管理 必须</div><div class="line">#MOUNTD_PORT=892</div><div class="line">#</div><div class="line">#</div><div class="line"># Optional arguments passed to rpc.statd. See rpc.statd(8)</div><div class="line">#STATDARG=&quot;&quot;</div><div class="line"># Port rpc.statd should listen on.</div><div class="line">#STATD_PORT=662</div><div class="line"># Outgoing port statd should used. The default is port</div><div class="line"># is random</div><div class="line">#STATD_OUTGOING_PORT=2020</div><div class="line"># Specify callout program </div><div class="line">#STATD_HA_CALLOUT=&quot;/usr/local/bin/foo&quot;</div><div class="line">#</div><div class="line">#</div><div class="line"># Optional arguments passed to rpc.idmapd. See rpc.idmapd(8)</div><div class="line">#RPCIDMAPDARGS=&quot;&quot;</div><div class="line">#</div><div class="line"># Set to turn on Secure NFS mounts. </div><div class="line">#SECURE_NFS=&quot;yes&quot;</div><div class="line"># Optional arguments passed to rpc.gssd. See rpc.gssd(8)</div><div class="line">#RPCGSSDARGS=&quot;&quot;</div><div class="line"># Optional arguments passed to rpc.svcgssd. See rpc.svcgssd(8)</div><div class="line">#RPCSVCGSSDARGS=&quot;&quot;</div><div class="line">#</div><div class="line"># To enable RDMA support on the server by setting this to</div><div class="line"># the port the server should listen on</div><div class="line">#RDMA_PORT=20049</div></pre></td></tr></table></figure>
<p>NFS需要启动的DAEMONS：参考NFS daemons<br>    pc.nfsd:由nfsd的主要功能是处理内核模块。用户空间程序只指定什么样的服务应该侦听套接字的内核，什么NFS版本，它应该支持，并应该使用多少的内核线程。 必须<br>    portmap：处理RPC程序客户端和服务器端的端口对应 必须<br>    rpc.mountd：负责NFS的档案系统，当CLIENT端通过rpc.nfsd登陆SERVER后，对clinet存取server的文件进行一系列的管理 必须<br>    lockd：处理通过RPC包的锁定请求<br>    statd：为nfs锁定服务提供crash恢复功能<br>    rquotad：处理当用户通过nfsmount到远程服务器时的配额<br>    守护进程启动顺序：rpc.portmap, rpc.mountd, rpc.nfsd, rpc.statd, rpc.lockd (新版本会自动跟着nfsd启动起来), rpc.rquotad</p>
<p>其实默认开通2049和111就可以连接上，如果需要开通别的需求，就要固定别的端口了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 2049 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 2049 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 111 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 111 -j ACCEPT</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 111 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 875 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 2049 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 876 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 2049 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 875 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 111 -j ACCEPT</div><div class="line">iptables -A INPUT -p udp -s 192.168.1.0/24 --dport 876 -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="如果服务器突然挂掉，这里我们模拟一下-通过service-nfs-stop"><a href="#如果服务器突然挂掉，这里我们模拟一下-通过service-nfs-stop" class="headerlink" title="如果服务器突然挂掉，这里我们模拟一下 通过service nfs stop"></a>如果服务器突然挂掉，这里我们模拟一下 通过service nfs stop</h3><p>这个时候客户机通过df -h  或者直接访问目录会卡死</p>
<p>我们可以通过  mount 查询到客户机挂载的地址</p>
<p>通过输入 umont -f /目录  强制卸载</p>
<p>如果一次不行，多执行几遍就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里我们分成两台主机，一台web-html nfs客户端ip为192.168.1.100。一台web-php nfs服务端ip为192.168.1.101。&lt;/p&gt;
&lt;h3 id=&quot;首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装&quot;&gt;&lt;a href=&quot;#首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装&quot; class=&quot;headerlink&quot; title=&quot;首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装&quot;&gt;&lt;/a&gt;首先我们要判断是否安装rpc，它主要用于给nfs提供传输。客户端服务端都要装&lt;/h3&gt;&lt;p&gt;一般系统都安装好装好了，没有就安装下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;service portmap status&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;service rpcbind status&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install nfs-utils //nfs软件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;登陆客户端查看-nginx的id号&quot;&gt;&lt;a href=&quot;#登陆客户端查看-nginx的id号&quot; class=&quot;headerlink&quot; title=&quot;登陆客户端查看 nginx的id号&quot;&gt;&lt;/a&gt;登陆客户端查看 nginx的id号&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@Web-html nfs]# id nginx&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;uid=501(nginx) gid=501(nginx) groups=501(nginx)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;登陆服务端，编辑-etc-exports-格式如下&quot;&gt;&lt;a href=&quot;#登陆服务端，编辑-etc-exports-格式如下&quot; class=&quot;headerlink&quot; title=&quot;登陆服务端，编辑/etc/exports,格式如下&quot;&gt;&lt;/a&gt;登陆服务端，编辑/etc/exports,格式如下&lt;/h3&gt;&lt;p&gt;&amp;lt;共享目录&amp;gt; 客户端1(选项) [客户端2(选项) …]&lt;br&gt;共享目录：NFS共享给客户机的目录。&lt;br&gt;客户端：网络中可以访问此目录的主机。多个客户端以空格分隔。&lt;br&gt;选项：设置目录的访问权限、用户映射等，多个选项以逗号分隔。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux" scheme="http://sunhao.win/tags/linux/"/>
    
      <category term="nfs" scheme="http://sunhao.win/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题-谈谈你对模块化的理解</title>
    <link href="http://sunhao.win/articles/web-module.html"/>
    <id>http://sunhao.win/articles/web-module.html</id>
    <published>2017-05-23T08:40:29.000Z</published>
    <updated>2017-05-24T03:14:24.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="点评"><a href="#点评" class="headerlink" title="点评"></a>点评</h3><p>很多面试公司会问一下，你对模块化的理解。表面上很简单，，但却可以评测出一个人对于前端工程化的认识，实际能力，和学习能力。所以需要充分的准备。切记不可随口回答。一场战斗的胜利去决定于站前的准备。</p>
<h3 id="为什么需要模块，什么是组件化。它们之间有什么区别？"><a href="#为什么需要模块，什么是组件化。它们之间有什么区别？" class="headerlink" title="为什么需要模块，什么是组件化。它们之间有什么区别？"></a>为什么需要模块，什么是组件化。它们之间有什么区别？</h3><p>首先我们需要从语义上明白什么是模块</p>
<p>模块，英文名module。又称构件,是能够单独命名并独立地完成一定功能的程序语句的集合（即程序代码和数据结构的集合体）。它具有两个基本的特征：外部特征和内部特征。外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能；内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）。</p>
<p>两个重点，一,它有一个接口，二,它内部程序不对外访问。</p>
<p>简单理解，模块就是多个函数的集合…………</p>
<p>再简单点，模块就是手机，里面跑着各种各样的程序，我们通过触摸控制。触摸屏就是我们的接口，里面程序就是内部特征。</p>
<p>还是有点抽象。我们写个小程序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">phone</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">weChat</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'我是不插它'</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">touch</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		weChat();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">ctltouch</span>: touch</div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> iphone8 = phone();</div><div class="line"></div><div class="line">iphone8.ctltouch(); <span class="comment">//VM230:3 我是不插它</span></div></pre></td></tr></table></figure>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;点评&quot;&gt;&lt;a href=&quot;#点评&quot; class=&quot;headerlink&quot; title=&quot;点评&quot;&gt;&lt;/a&gt;点评&lt;/h3&gt;&lt;p&gt;很多面试公司会问一下，你对模块化的理解。表面上很简单，，但却可以评测出一个人对于前端工程化的认识，实际能力，和学习能力。所以需要充分的准备。切记不可随口回答。一场战斗的胜利去决定于站前的准备。&lt;/p&gt;
&lt;h3 id=&quot;为什么需要模块，什么是组件化。它们之间有什么区别？&quot;&gt;&lt;a href=&quot;#为什么需要模块，什么是组件化。它们之间有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要模块，什么是组件化。它们之间有什么区别？&quot;&gt;&lt;/a&gt;为什么需要模块，什么是组件化。它们之间有什么区别？&lt;/h3&gt;&lt;p&gt;首先我们需要从语义上明白什么是模块&lt;/p&gt;
&lt;p&gt;模块，英文名module。又称构件,是能够单独命名并独立地完成一定功能的程序语句的集合（即程序代码和数据结构的集合体）。它具有两个基本的特征：外部特征和内部特征。外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能；内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）。&lt;/p&gt;
&lt;p&gt;两个重点，一,它有一个接口，二,它内部程序不对外访问。&lt;/p&gt;
&lt;p&gt;简单理解，模块就是多个函数的集合…………&lt;/p&gt;
&lt;p&gt;再简单点，模块就是手机，里面跑着各种各样的程序，我们通过触摸控制。触摸屏就是我们的接口，里面程序就是内部特征。&lt;/p&gt;
&lt;p&gt;还是有点抽象。我们写个小程序。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;phone&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;weChat&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;我是不插它&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;touch&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		weChat();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;ctltouch&lt;/span&gt;: touch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; iphone8 = phone();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;iphone8.ctltouch(); &lt;span class=&quot;comment&quot;&gt;//VM230:3 我是不插它&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;待续&quot;&gt;&lt;a href=&quot;#待续&quot; class=&quot;headerlink&quot; title=&quot;待续&quot;&gt;&lt;/a&gt;待续&lt;/h3&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://sunhao.win/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://sunhao.win/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="模块化" scheme="http://sunhao.win/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>linux如何查杀指定用户进程</title>
    <link href="http://sunhao.win/articles/linux-kill9-psef.html"/>
    <id>http://sunhao.win/articles/linux-kill9-psef.html</id>
    <published>2017-05-23T03:02:20.000Z</published>
    <updated>2017-05-23T03:23:50.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先w查看登录用户"><a href="#首先w查看登录用户" class="headerlink" title="首先w查看登录用户"></a>首先w查看登录用户</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170523/110721680.png" alt="mark"></p>
<h3 id="通过ps-ef-grep-pts-0-查看pts-0上的用户"><a href="#通过ps-ef-grep-pts-0-查看pts-0上的用户" class="headerlink" title="通过ps -ef | grep pts/0 查看pts/0上的用户"></a>通过ps -ef | grep pts/0 查看pts/0上的用户</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170523/110943135.png" alt="mark"></p>
<p>我们可以看到pid是17866  其余的ppid都是最终指向的都是这个。</p>
<p>-e 显示所有进程。<br>-f 全格式。<br>ps e 列出程序时，显示每个程序所使用的环境变量。<br>ps f 用ASCII字符显示树状结构，表达程序间的相互关系</p>
<a id="more"></a>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170523/111504923.png" alt="mark"></p>
<p>我们通过kill -9 强制关闭进程。一般情况下 请不要这样，因为是强制关闭。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先w查看登录用户&quot;&gt;&lt;a href=&quot;#首先w查看登录用户&quot; class=&quot;headerlink&quot; title=&quot;首先w查看登录用户&quot;&gt;&lt;/a&gt;首先w查看登录用户&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170523/110721680.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;通过ps-ef-grep-pts-0-查看pts-0上的用户&quot;&gt;&lt;a href=&quot;#通过ps-ef-grep-pts-0-查看pts-0上的用户&quot; class=&quot;headerlink&quot; title=&quot;通过ps -ef | grep pts/0 查看pts/0上的用户&quot;&gt;&lt;/a&gt;通过ps -ef | grep pts/0 查看pts/0上的用户&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170523/110943135.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到pid是17866  其余的ppid都是最终指向的都是这个。&lt;/p&gt;
&lt;p&gt;-e 显示所有进程。&lt;br&gt;-f 全格式。&lt;br&gt;ps e 列出程序时，显示每个程序所使用的环境变量。&lt;br&gt;ps f 用ASCII字符显示树状结构，表达程序间的相互关系&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="kill" scheme="http://sunhao.win/tags/kill/"/>
    
      <category term="ps" scheme="http://sunhao.win/tags/ps/"/>
    
  </entry>
  
  <entry>
    <title>nginx重启，重载，测试，配置</title>
    <link href="http://sunhao.win/articles/nginx-config.html"/>
    <id>http://sunhao.win/articles/nginx-config.html</id>
    <published>2017-05-09T06:13:42.000Z</published>
    <updated>2017-05-09T06:15:16.959Z</updated>
    
    <content type="html"><![CDATA[<p>nginx -s reload  ：修改配置后重新加载生效<br>nginx -s reopen  ：重新打开日志文件<br>nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确</p>
<p>关闭nginx：<br>nginx -s stop  :快速停止nginx<br>         quit  ：完整有序的停止nginx</p>
<p>其他的停止nginx 方式：</p>
<p>ps -ef | grep nginx</p>
<p>kill -QUIT 主进程号     ：从容停止Nginx<br>kill -TERM 主进程号     ：快速停止Nginx<br>pkill -9 nginx          ：强制停止Nginx</p>
<p>启动nginx:<br>nginx -c /path/to/nginx.conf</p>
<p>平滑重启nginx：<br>kill -HUP 主进程号</p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx -s reload  ：修改配置后重新加载生效&lt;br&gt;nginx -s reopen  ：重新打开日志文件&lt;br&gt;nginx -t -c /path/to/nginx.conf 测试nginx配置文件是否正确&lt;/p&gt;
&lt;p&gt;关闭nginx：&lt;br&gt;nginx -s stop  :快速停止nginx&lt;br&gt;         quit  ：完整有序的停止nginx&lt;/p&gt;
&lt;p&gt;其他的停止nginx 方式：&lt;/p&gt;
&lt;p&gt;ps -ef | grep nginx&lt;/p&gt;
&lt;p&gt;kill -QUIT 主进程号     ：从容停止Nginx&lt;br&gt;kill -TERM 主进程号     ：快速停止Nginx&lt;br&gt;pkill -9 nginx          ：强制停止Nginx&lt;/p&gt;
&lt;p&gt;启动nginx:&lt;br&gt;nginx -c /path/to/nginx.conf&lt;/p&gt;
&lt;p&gt;平滑重启nginx：&lt;br&gt;kill -HUP 主进程号&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://sunhao.win/categories/nginx/"/>
    
    
      <category term="nginx配置" scheme="http://sunhao.win/tags/nginx%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>mysql2013错误</title>
    <link href="http://sunhao.win/articles/mysql-2013error.html"/>
    <id>http://sunhao.win/articles/mysql-2013error.html</id>
    <published>2017-05-09T02:42:21.000Z</published>
    <updated>2017-05-09T02:48:35.933Z</updated>
    
    <content type="html"><![CDATA[<p>mysql错误Lost connection to MySQL server at ‘reading initial communication packet’, system error: 0<br><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170509/104541613.png" alt="mark"><br><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170509/104641667.png" alt="mark"><br>默认绑定的是本地,所以把bind-address = 127.0.0.1注释掉就好了。<br>然后重启下服务器<br>/etc/init.d/mysql restart</p>
<a id="more"></a>
<p>如果忘记密码<br>可以添加<br>skip-grant-tables<br>忽略权限验证</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql错误Lost connection to MySQL server at ‘reading initial communication packet’, system error: 0&lt;br&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170509/104541613.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170509/104641667.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;默认绑定的是本地,所以把bind-address = 127.0.0.1注释掉就好了。&lt;br&gt;然后重启下服务器&lt;br&gt;/etc/init.d/mysql restart&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://sunhao.win/categories/mysql/"/>
    
    
      <category term="2013错误" scheme="http://sunhao.win/tags/2013%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>写给前端工程师的DNS基础知识</title>
    <link href="http://sunhao.win/articles/netwrok-dns.html"/>
    <id>http://sunhao.win/articles/netwrok-dns.html</id>
    <published>2017-05-05T06:47:39.000Z</published>
    <updated>2017-05-15T00:11:47.229Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>在工作中，经常切换本地和服务器，添加各种解析。遇到DNS引起的一些问题。发现网上资料很混乱，用心整理写了下，希望对大家有帮助。</p>
<p>DNS（Domain Name System，域名系统），最初，由于ip长且难记，通过ip访问网站不方便。。所以后来通过发明了DNS服务器，这个时候我们访问网站输入网站域名，DNS服务器就解析我们的域名为ip。这样我们实际访问的就是对应的ip地址啦。</p>
<p>抽象点DNS就是   一个记录ip地址的超级分布式数据库。</p>
<a id="more"></a>
<h3 id="根域和根域服务器"><a href="#根域和根域服务器" class="headerlink" title="根域和根域服务器"></a>根域和根域服务器</h3><p>首先我们要明白如何区分域，至于如何解析我们后面慢慢讲。</p>
<p>当我们输入www.sunhao.win访问网站。实际上是访问了不同的域。<br>其中”.”是DNS 命称空间，用来分割不同域,</p>
<p>www,sunhao,win分别代表不同的域。其实还有个域，跟在win后面，只是因为是域名系统默认的,所以这里不用写，这个就是根域。</p>
<p>意义上域名应该是这样。</p>
<pre><code>www.sunhao.win.根域
</code></pre><p>根域记录了所有win域(这一个位置的叫顶级域),它和sunhao(二级域),共同构成顶级域名sunhao.win</p>
<p>www(三级域)和sunhao.win叫二级域名www.sunhao.win</p>
<p>这里大家要明白sunhao.win和www.sunhao.win是两个不同的网址。</p>
<p>因为我们上网使用的UDP/TCP，UDP数据往往没有保障,但速度快,通常用于查询和响应，TCP由于多次验证，传输有保证，但速度慢，多用于主服务器和从服务器之间的传送。</p>
<p>因此我们DNS主要通过UDP。</p>
<p>当我们访问www.sunhao.win的时候,如果本地dns服务器没有记录，那么它就会向根服务器去请求地址。</p>
<p>也就是它会向根服务器请求win域的地址。然后通过win域继续向下请求。根域名服务器并不直接把待查询的域名直接解析出IP地址，而是告诉本地域名服务器下一步应当找哪一个顶级域名服务器进行查询。</p>
<p>所以根域名服务器很重要。假定所有的根域名服务器都瘫痪了，那么整个DNS系统就无法工作。</p>
<h3 id="顶级域和顶级域服务器"><a href="#顶级域和顶级域服务器" class="headerlink" title="顶级域和顶级域服务器"></a>顶级域和顶级域服务器</h3><p>例如www.sunhao.win</p>
<p>win所在的位置就是顶级域</p>
<p>域名只是逻辑概念，并不代表计算机所在的物理地点。据2006年12月统计，现在顶级域名TLD(Top Level Domain)已有265个，分为三大类：</p>
<p>(1)国家顶级域名nTLD：采用ISO3166的规定。如：cn代表中国，us代表美国，uk代表英国，等等。国家域名又常记为ccTLD(cc表示国家代码contry-code)。</p>
<p>(2)通用顶级域名gTLD：最常见的通用顶级域名有7个，即：com(公司企业)，net(网络服务机构)，org(非营利组织)，int(国际组织)，gov(美国的政府部门)，mil(美国的军事部门)。<br>(3)基础结构域名(infrastructure domain)：这种顶级域名只有一个，即arpa，用于反向域名解析，因此称为反向域名。</p>
<p>顶级域名服务器主要负责管理在该顶级域名服务器注册的二级域名。</p>
<h3 id="权威DNS和权威域名服务器"><a href="#权威DNS和权威域名服务器" class="headerlink" title="权威DNS和权威域名服务器"></a>权威DNS和权威域名服务器</h3><p>权威DNS服务器是经过上一级授权，对域名进行解析的服务器，同时它可以把解析授权转授给其他人。</p>
<p>例如，<br>在互联网上,谁售出的域名,就把域名授权给谁，比如sunhao.win是阿里售出的，所以权威服务器是阿里的dns解析服务器。(为了保障安全和保障一般权威DNS服务器都是俩)</p>
<p>dns9.hichina.com<br>dns10.hichina.com</p>
<p>但是由于业务我从后台调整解析到yunjiasu。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;; AUTHORITY SECTION:</div><div class="line">sunhao.win.		2992	IN	NS	n563.ns.yunjiasu.com.</div><div class="line">sunhao.win.		2992	IN	NS	n3101.ns.yunjiasu.com.</div></pre></td></tr></table></figure>
<p>其中n563.ns.yunjiasu.com和n3101.ns.yunjiasu.com是sunhao.win的权威服务器。<br>由顶级域名win授权ns.yunjiasu.com.进行管理的。</p>
<p>当访问sunhao.win通过顶级域名解析后，顶级域名win就给用户说,你要访问sunhao.win是吧，你得去n563.ns.yunjiasu.com看看,它那记录了ip地址,不行就去n3101.ns.yunjiasu.com.再不行，你就自己报错把。^_^.</p>
<p>通俗点说,就是爸爸给孩子十块钱(这里指域名)，这十块钱,孩子可以自己花，也可以转给别人。拥有了控制十块钱的所有权限。简单点说,就是一旦把域名授权给我，授权给我的那部分，我做主。</p>
<h3 id="运营商DNS服务器和本地DNS服务器"><a href="#运营商DNS服务器和本地DNS服务器" class="headerlink" title="运营商DNS服务器和本地DNS服务器"></a>运营商DNS服务器和本地DNS服务器</h3><p>在实际上网中，我们不是直接连接根服务器，而是通过本地DNS服务器上网。</p>
<p>如果DNS设置不好，或者不对，会导致如我们qq能登陆，而页面无法浏览网页的症状、</p>
<p>在这，本地DNS主要指是指各地电信运营商提供的域名解析服务器。也就是我们在上网网卡里面你设置的DNS地址。当然也可以自己建设一个服务器。</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170512/134034145.png" alt="mark"></p>
<p>当一个主机发出DNS查询请求时，这个查询请求报文就发送给本地域名服务器，本地服务器替我们进行DNS解析,我们得到的ip地址是由本地服务器返回的。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>我们了解了个个服务器,理一下常规DNS系统如何运作的吧</p>
<p>1，用户—&gt;本地递归服务器— &gt; 根权威服务器— &gt; COM权威服务器— &gt; X(X代表任意地址).COM权威服务器— &gt; 本地递归服务器— &gt;用户</p>
<p>2，用户—&gt;本地递归服务器— &gt; 缓存 — &gt;用户</p>
<p>在这我们要明白两点。</p>
<p>一、递归查询:主机向本地域名服务器的查询一般都是采用递归查询。所谓递归查询就是：如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其它根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是报错，表示无法查询到所需的IP地址。</p>
<p>简单说 就是说我们请求的地址  必须返回一个准确的ip地址，没有就向别的地址查询，然后返回给我们一个准确的ip地址。我们的本地服务器就是递归服务器。</p>
<p>二、迭代查询:本地域名服务器向根域名服务器的查询的迭代查询。迭代查询的特点：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的IP地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地服务器进行后续的查询。根域名服务器通常是把自己知道的顶级域名服务器的IP地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的IP地址，要么告诉本地服务器下一步应当向哪一个权限域名服务器进行查询。最后，知道了所要解析的IP地址或报错，然后把这个结果返回给发起查询的主机。</p>
<p>这里由各级服务器进行的就是迭代查询，自身不返回ip，而是返回给下一级的DNS服务器地址。</p>
<p>实际一般本地DNS访问量巨大，会有一个前置的F5服务器，用于分发给后缀的服务器实现负载均衡。同时服务器会根据设置会缓存一段时间地址。所以有时候我们在服务器改完DNS，有时候会等一段时间，才能访问到新的地址。</p>
<h3 id="解析记录"><a href="#解析记录" class="headerlink" title="解析记录"></a>解析记录</h3><p>域名解析记录A、CNAME、MX、NS、TXT、AAAA、SRV、显性URL、隐形URL含义</p>
<ol>
<li><p>A记录：解析域名到指定ip</p>
</li>
<li><p>CNAME记录（Canonical Name 别名指向）：解析域名到域名</p>
</li>
<li><p>MX记录：指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</p>
</li>
<li><p>NS记录：解析服务器记录。用来表明由哪台服务器对该域名进行解析，这里的NS记录只对子域名生效。<br>优先级：NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。</p>
</li>
<li><p>TXT记录：为某个主机名或域名设置联系信息，如：<br>admin IN TXT “管理员, 电话： 1000000000”</p>
</li>
<li><p>AAAA记录(AAAA record)：是用来将域名解析到IPv6地址的DNS记录。用户可以将一个域名解析到IPv6地址上，也可以将子域名解析到IPv6地址上。</p>
</li>
<li><p>SRV记录：一般是为Microsoft的活动目录设置时的应用。</p>
</li>
<li><p>显性URL记录：访问域名时，会自动跳转到所指的另一个网络地址（URL），此时在浏览器地址栏中显示的是跳转的地址。</p>
</li>
<li><p>隐形URL记录：访问域名时，会自动跳转到所指的另一个网络地址（URL），此时在浏览器地址栏中显示的是原域名地址。</p>
</li>
</ol>
<h3 id="应答"><a href="#应答" class="headerlink" title="应答"></a>应答</h3><p>权威应答</p>
<p>由权威服务器区域直接返回的应答地址</p>
<p>非权威应答</p>
<p>由缓存或者其他服务器返回的地址</p>
<!--### 智能dns与cdn加速-->
<h3 id="TTL值和缓存"><a href="#TTL值和缓存" class="headerlink" title="TTL值和缓存"></a>TTL值和缓存</h3><p>假如我们每次都发送一次DNS请求,那么服务器的压力会相当大，但是服务器的ip地址一般会经常变，所以实际我们都设置TTL把DNS缓存到本地。</p>
<p>什么是域名的TTL值？<br>TTL(Time- To-Live)，简单的说它就是返回的记录在DNS服务器上保留的时间，就是TTL值。<br><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170505/155336775.png" alt="mark"></p>
<p>DNS会将最终域名解析的结果缓存至本地。分为两种浏览器缓存和操作系统(OS)缓存。</p>
<p>在浏览器中访问的时候，会优先访问浏览器缓存，如果访问指定域名,没有命中返回,则访问OS缓存。最后再次访问dns服务器。</p>
<p>所以我们在调试的时候，更换了本地hosts仍然访问的是旧地址,那么就等一会吧。</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170505/153318984.png" alt="mark"></p>
<p>我们可以看到chrome会自动缓存70s dns。</p>
<p>那么我们如果想在70s内清除缓存怎么办呢?</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170515/080436851.png" alt="mark"></p>
<p>我们在chrome地址栏里面输入chrome，会自动索引出有关的基本地址。选择chrome-urls</p>
<p>往下拉选择chrome://net-internals</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170515/080832503.png" alt="mark"></p>
<p>其中最右面</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170515/080915811.png" alt="mark"></p>
<p>可以清除页面缓存</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170515/080944745.png" alt="mark"></p>
<p>点Clear host cache，可以用于清除DNS缓存。</p>
<p>其实这个页面最好收藏下来，便于以后调试时及时刷新。</p>
<h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><p>在DNS系统之前，对应ip都是保存在hosts文件之中，现在系统仍然保留它。</p>
<p>实际通过浏览器访问，会先查询浏览器dns缓存，再查询hosts里面是否有记录</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170512/144511980.png" alt="mark"></p>
<p>一般win系统Hosts文件就在C:\WINDOWS\system32\drivers\etc中</p>
<p>通过hosts我们可以把域名改成本地的地址，进行调试开发。</p>
<p>对于经常访问的网站，也可以直接设置到hosts里，加快访问速度。</p>
<!--### 域名迁移  换DNS服务商-->
<h3 id="sunhao-win解析过程分析"><a href="#sunhao-win解析过程分析" class="headerlink" title="sunhao.win解析过程分析"></a>sunhao.win解析过程分析</h3><p>最后我们看下用dig +trace 跟踪的全部解析过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">[root@sunhao ~]# dig +trace www.sunhao.win</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.37.rc1.el6 &lt;&lt;&gt;&gt; +trace www.sunhao.win</div><div class="line">;; global options: +cmd</div><div class="line">.			12674	IN	NS	e.root-servers.net.</div><div class="line">.			12674	IN	NS	i.root-servers.net.</div><div class="line">.			12674	IN	NS	h.root-servers.net.</div><div class="line">.			12674	IN	NS	k.root-servers.net.</div><div class="line">.			12674	IN	NS	d.root-servers.net.</div><div class="line">.			12674	IN	NS	l.root-servers.net.</div><div class="line">.			12674	IN	NS	a.root-servers.net.</div><div class="line">.			12674	IN	NS	c.root-servers.net.</div><div class="line">.			12674	IN	NS	m.root-servers.net.</div><div class="line">.			12674	IN	NS	g.root-servers.net.</div><div class="line">.			12674	IN	NS	b.root-servers.net.</div><div class="line">.			12674	IN	NS	f.root-servers.net.</div><div class="line">.			12674	IN	NS	j.root-servers.net.</div><div class="line">;; Received 492 bytes from 211.161.46.85#53(211.161.46.85) in 42 ms</div><div class="line"></div><div class="line">win.			172800	IN	NS	ns1.dns.nic.win.</div><div class="line">win.			172800	IN	NS	ns6.dns.nic.win.</div><div class="line">win.			172800	IN	NS	ns3.dns.nic.win.</div><div class="line">win.			172800	IN	NS	ns2.dns.nic.win.</div><div class="line">win.			172800	IN	NS	ns5.dns.nic.win.</div><div class="line">win.			172800	IN	NS	ns4.dns.nic.win.</div><div class="line">;; Received 412 bytes from 192.36.148.17#53(192.36.148.17) in 191 ms</div><div class="line"></div><div class="line">sunhao.win.		3600	IN	NS	n563.ns.yunjiasu.com.</div><div class="line">sunhao.win.		3600	IN	NS	n3101.ns.yunjiasu.com.</div><div class="line">;; Received 86 bytes from 156.154.145.182#53(156.154.145.182) in 2415 ms</div><div class="line"></div><div class="line">www.sunhao.win.		300	IN	A	162.159.211.33</div><div class="line">www.sunhao.win.		300	IN	A	162.159.210.33</div><div class="line">;; Received 92 bytes from 220.181.111.112#53(220.181.111.112) in 6 ms</div></pre></td></tr></table></figure>
<p>.就是一开始说的根域。NS就是指定该域名由哪个DNS服务器来进行解析。</p>
<p>我们可以清晰的看到第一步先从13台dns服务器，然是顶级域win,最后权威域sunhao.win。<br>查到地址在162.159.211.33和162.159.210.33上。最后的是A记录。不再是NS了哦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DNS&quot;&gt;&lt;a href=&quot;#DNS&quot; class=&quot;headerlink&quot; title=&quot;DNS&quot;&gt;&lt;/a&gt;DNS&lt;/h3&gt;&lt;p&gt;在工作中，经常切换本地和服务器，添加各种解析。遇到DNS引起的一些问题。发现网上资料很混乱，用心整理写了下，希望对大家有帮助。&lt;/p&gt;
&lt;p&gt;DNS（Domain Name System，域名系统），最初，由于ip长且难记，通过ip访问网站不方便。。所以后来通过发明了DNS服务器，这个时候我们访问网站输入网站域名，DNS服务器就解析我们的域名为ip。这样我们实际访问的就是对应的ip地址啦。&lt;/p&gt;
&lt;p&gt;抽象点DNS就是   一个记录ip地址的超级分布式数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="netwrok" scheme="http://sunhao.win/categories/netwrok/"/>
    
    
      <category term="dns" scheme="http://sunhao.win/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>fg、bg、jobs、nohup、ctrl+z、ctrl+c、screen命令</title>
    <link href="http://sunhao.win/articles/linux-bg-fg-jobs-screen.html"/>
    <id>http://sunhao.win/articles/linux-bg-fg-jobs-screen.html</id>
    <published>2017-05-04T02:10:17.000Z</published>
    <updated>2017-05-16T05:57:57.165Z</updated>
    
    <content type="html"><![CDATA[<p>一、&amp;</p>
<p>加在一个命令的最后，可以把这个命令放到后台执行，如</p>
<p>watch  -n 10 sh  test.sh  &amp;  #每10s在后台执行一次test.sh脚本</p>
<p>二、ctrl + z</p>
<p>可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</p>
<p>三、jobs</p>
<p>查看当前有多少在后台运行的命令</p>
<p>jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell从当前的shell环境已知的列表中删除任务的进程标识。</p>
<a id="more"></a>
<p>四、fg</p>
<p>将后台中的命令调至前台继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。</p>
<p>五、bg</p>
<p>将一个在后台暂停的命令，变成在后台继续执行。如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出。</p>
<p>六、kill</p>
<p>法子1：通过jobs命令查看job号（假设为num），然后执行kill %num</p>
<p>法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行kill pid</p>
<p>前台进程的终止：Ctrl+c</p>
<p>七、nohup</p>
<p>如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到），这时候需要nohup。该命令可以在你退出帐户/</p>
<p>关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令）</p>
<p>ps -aux | grep “test.sh”  #a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分</p>
<p>进程的终止： </p>
<p>后台进程的终止：</p>
<p>一、使用Screen创建一个Session</p>
<p>　　screen -S sessionName 注：sessionName是要删除的session名字</p>
<p>二、结束一个Screen创建的session</p>
<p>1、首先使用screen -ls命令查看全部session列表</p>
<p>2、使用screen -S sessionName -X quit, 注：sessionName是要删除的session名字</p>
<p>三、恢复一个Screen的session</p>
<p>1、Screen -r sessionName</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、&amp;amp;&lt;/p&gt;
&lt;p&gt;加在一个命令的最后，可以把这个命令放到后台执行，如&lt;/p&gt;
&lt;p&gt;watch  -n 10 sh  test.sh  &amp;amp;  #每10s在后台执行一次test.sh脚本&lt;/p&gt;
&lt;p&gt;二、ctrl + z&lt;/p&gt;
&lt;p&gt;可以将一个正在前台执行的命令放到后台，并且处于暂停状态。&lt;/p&gt;
&lt;p&gt;三、jobs&lt;/p&gt;
&lt;p&gt;查看当前有多少在后台运行的命令&lt;/p&gt;
&lt;p&gt;jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell从当前的shell环境已知的列表中删除任务的进程标识。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="fg" scheme="http://sunhao.win/tags/fg/"/>
    
      <category term="bg" scheme="http://sunhao.win/tags/bg/"/>
    
      <category term="jobs" scheme="http://sunhao.win/tags/jobs/"/>
    
      <category term="screen" scheme="http://sunhao.win/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>respberry树莓派 无线网络配置</title>
    <link href="http://sunhao.win/articles/respberry-wpanetwork.html"/>
    <id>http://sunhao.win/articles/respberry-wpanetwork.html</id>
    <published>2017-05-02T07:56:14.000Z</published>
    <updated>2017-05-02T07:59:46.240Z</updated>
    
    <content type="html"><![CDATA[<p>执行命令: sudo iwlist wlan0 scan , 看看能否手动扫描周围的ESSID.</p>
<h3 id="无线配置"><a href="#无线配置" class="headerlink" title="无线配置"></a>无线配置</h3><p>修改配置文件: sudo vim /etc/network/interfaces, 如果需要自动IP, 增加如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># wifi (dhcp config) :</div><div class="line">auto wlan0</div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet dhcp</div><div class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<p>如果需要固定IP, 增加的内容如下:</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">auto wlan0</div><div class="line">iface wlan0 inet static</div><div class="line">wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line">address 192.168.1.12</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.1.1</div></pre></td></tr></table></figure>
<p>编辑/etc/wpa_supplicant/wpa_supplicant.conf, 增加如下几行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=&quot;ssid1&quot;</div><div class="line">    psk=&quot;密码&quot;</div><div class="line">&#125;</div><div class="line">network=&#123;</div><div class="line">    ssid=&quot;ssid2&quot;</div><div class="line">    psk=&quot;密码&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里存的是明文密码, 如果需要存储加密后的密码, 执行命令wpa_passphrase ssid password, 替换上面的psk密码.<br>wpa_supplicant.conf里面更多参数详情, 请参考man手册链接, 上面的配置能应付大多数路由器了.</p>
<p>重启wlan0</p>
<p>重启无线网卡: sudo ifdown wlan0 and then  sudo ifup wlan0<br>然后运行ifconfig wlan0 查看无线网卡是否获能够取到了IP.<br>如果固定ip  最好重启 reboot  输入密码</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行命令: sudo iwlist wlan0 scan , 看看能否手动扫描周围的ESSID.&lt;/p&gt;
&lt;h3 id=&quot;无线配置&quot;&gt;&lt;a href=&quot;#无线配置&quot; class=&quot;headerlink&quot; title=&quot;无线配置&quot;&gt;&lt;/a&gt;无线配置&lt;/h3&gt;&lt;p&gt;修改配置文件: sudo vim /etc/network/interfaces, 如果需要自动IP, 增加如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# wifi (dhcp config) :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;auto wlan0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;allow-hotplug wlan0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;iface wlan0 inet dhcp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果需要固定IP, 增加的内容如下:&lt;/p&gt;
    
    </summary>
    
      <category term="respberry" scheme="http://sunhao.win/categories/respberry/"/>
    
    
      <category term="无线网络配置" scheme="http://sunhao.win/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>linux-source</title>
    <link href="http://sunhao.win/articles/linux-source.html"/>
    <id>http://sunhao.win/articles/linux-source.html</id>
    <published>2017-05-02T02:47:55.000Z</published>
    <updated>2017-05-02T02:57:10.970Z</updated>
    
    <content type="html"><![CDATA[<p>source: usage: source filename [arguments]</p>
<p>source命令：<br>source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令。<br>功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句<br>source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。<br>用法：<br>source filename 或 . filename<br>source命令(从 C Shell 而来)是bash shell的内置命令;点命令(.)，就是个点符号(从Bourne Shell而来)是source的另一名称。<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;source: usage: source filename [arguments]&lt;/p&gt;
&lt;p&gt;source命令：&lt;br&gt;source命令也称为“点命令”，也就是一个点符号（.）,是bash的内部命令。&lt;br&gt;功能：使Shell读入指定的Shell程序文件并依次执行文件中的所有语句&lt;br&gt;source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。&lt;br&gt;用法：&lt;br&gt;source filename 或 . filename&lt;br&gt;source命令(从 C Shell 而来)是bash shell的内置命令;点命令(.)，就是个点符号(从Bourne Shell而来)是source的另一名称。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="source" scheme="http://sunhao.win/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>/bin,/sbin,/usr/bin,/usr/sbin区别</title>
    <link href="http://sunhao.win/articles/linux-diff-sbin-bin.html"/>
    <id>http://sunhao.win/articles/linux-diff-sbin-bin.html</id>
    <published>2017-05-02T01:48:34.000Z</published>
    <updated>2017-05-02T02:13:59.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bin-sbin-usr-bin-usr-sbin区别"><a href="#bin-sbin-usr-bin-usr-sbin区别" class="headerlink" title="/bin,/sbin,/usr/bin,/usr/sbin区别"></a>/bin,/sbin,/usr/bin,/usr/sbin区别</h2><p>/ : this is root directory             root 用户根目录</p>
<p>/bin : commandsin this dir are all system installed user commands   系统的一些指令</p>
<p>/sbin: commands in this dir are all system installedsuper user commands<br>超级用户指令系统管理命令，这里存放的是系统管理员使用的管理程序 </p>
<p>/usr/bin: usercommands for applications 后期安装的一些软件的运行脚本</p>
<p>/usr/sbin:super user commands for applications 超级用户的一些管理程序</p>
<p>/usr/X11R6/bin: X application user commands</p>
<p>/usr/X11R6/sbin: X application super usercommands<br><a id="more"></a></p>
<p>Linux中的某些重要的目录：<br>    •主目录：/root、/home/username<br>    •用户可执行文件：/bin、/usr/bin、/usr/local/bin<br>    •系统可执行文件：/sbin、/usr/sbin、/usr/local/sbin<br>    •其他挂载点：/media、/mnt<br>    •配置：/etc<br>    •临时文件：/tmp<br>    •内核和Bootloader：/boot<br>    •服务器数据：/var、/srv<br>    •系统信息：/proc、/sys<br>    •共享库：/lib、/usr/lib、/usr/local/lib</p>
<pre><code>每个用户都拥有一个主目录。所有用户的个人文件（配置、数据甚至应用程序）都放在其中。
根的主目录为/root。大多数非根主目录包含在/home 树中，通常以用户命名。
重要的二进制位于 /bin（用户二进制）以及 /sbin（系统二进制）中。
不重要的二进制（如图形环境或Office 工具）安装在/usr/bin 和 /usr/sbin中。进行这种分隔是为了尽可能地缩小根分区。使用源代码编译的软件通常位于 /usr/local/bin 和/usr/local/sbin中。
</code></pre><h3 id="传统上的常规做法是："><a href="#传统上的常规做法是：" class="headerlink" title="传统上的常规做法是："></a>传统上的常规做法是：</h3><p>系统级的组件放在/bin、/lib；</p>
<p>根用户才能访问的放在/sbin；</p>
<p>系统repository提供的应用程序放在/usr/bin、/usr/lib；</p>
<p>用户自己编译的放在/usr/local/XXX。</p>
<p>现在有一些变化，在大约两年前，大量Linux系统都将/bin、/lib弄成/usr/bin、/usr/lib的符号链接。</p>
<p>此外，不同系统还会有很多的细微区别，比如Redhat系喜欢把32位的库放在/lib、/usr/lib，64位的库放在/lib64、/usr/</p>
<p>lib64，而Debian系喜欢把平台相关的那层名字放在/lib、/usr/lib的子目录里，比如/usr/lib/x86_64-linux-gnu/</p>
<p>。然后，各种配置文件的文件名、路径也会有区别，比如ssh服务器的配置文件可能叫/etc/ssh/sshd.conf，也可能叫/etc/ssh/sshd_config。。。</p>
<p>分成三块的最早的渊源，据说是这样的：</p>
<p>Unix开发者的机器的硬盘不够了，新加了一块，挂在/usr上；</p>
<p>又TM不够了，再加一块，挂在/usr/local上；</p>
<p>不知怎么，就变成规范了。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;bin-sbin-usr-bin-usr-sbin区别&quot;&gt;&lt;a href=&quot;#bin-sbin-usr-bin-usr-sbin区别&quot; class=&quot;headerlink&quot; title=&quot;/bin,/sbin,/usr/bin,/usr/sbin区别&quot;&gt;&lt;/a&gt;/bin,/sbin,/usr/bin,/usr/sbin区别&lt;/h2&gt;&lt;p&gt;/ : this is root directory             root 用户根目录&lt;/p&gt;
&lt;p&gt;/bin : commandsin this dir are all system installed user commands   系统的一些指令&lt;/p&gt;
&lt;p&gt;/sbin: commands in this dir are all system installedsuper user commands&lt;br&gt;超级用户指令系统管理命令，这里存放的是系统管理员使用的管理程序 &lt;/p&gt;
&lt;p&gt;/usr/bin: usercommands for applications 后期安装的一些软件的运行脚本&lt;/p&gt;
&lt;p&gt;/usr/sbin:super user commands for applications 超级用户的一些管理程序&lt;/p&gt;
&lt;p&gt;/usr/X11R6/bin: X application user commands&lt;/p&gt;
&lt;p&gt;/usr/X11R6/sbin: X application super usercommands&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="sbin" scheme="http://sunhao.win/tags/sbin/"/>
    
      <category term="bin" scheme="http://sunhao.win/tags/bin/"/>
    
  </entry>
  
  <entry>
    <title>反向代理 和 正向代理区别</title>
    <link href="http://sunhao.win/articles/php-proxy.html"/>
    <id>http://sunhao.win/articles/php-proxy.html</id>
    <published>2017-04-27T09:00:38.000Z</published>
    <updated>2017-04-28T06:40:20.811Z</updated>
    
    <content type="html"><![CDATA[<p>一个是代理客户端，为客户端收发请求，使真实客户端对服务器不可见。<br>一个是代理服务器，为服务器收发请求，使真实服务器对客户端不可见。<br>简单点说<br>代理的目的本身都是为了隐藏自己真实的地址。</p>
<p>正向代理,是客户端用的,因为符合正常的网络请求，所以叫正向代理。<br>而反向代理，是服务器用的，所以叫反向代理。</p>
<a id="more"></a>
<p>A同学在大众创业、万众创新的大时代背景下开启他的创业之路，目前他遇到的最大的一个问题就是启动资金，于是他决定去找马云爸爸借钱，可想而知，最后碰一鼻子灰回来了，情急之下，他想到一个办法，找关系开后门，经过一番消息打探，原来A同学的大学老师王老师是马云的同学，于是A同学找到王老师，托王老师帮忙去马云那借500万过来，当然最后事成了。不过马云并不知道这钱是A同学借的，马云是借给王老师的，最后由王老师转交给A同学。这里的王老师在这个过程中扮演了一个非常关键的角色，就是代理，也可以说是正向代理，王老师代替A同学办这件事，这个过程中，真正借钱的人是谁，马云是不知道的，这点非常关键。   我们常说的代理也就是只正向代理，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，某些科学上网工具扮演的就是典型的正向代理角色。用浏览器访问 <a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a> 时，被残忍的block，于是你可以在国外搭建一台代理服务器，让代理帮我去请求google.com，代理把请求返回的相应结构再返回给我。</p>
<p>client &lt;==&gt; proxy &lt;==&gt;server</p>
<p>这里client知道server地址,但server不知道client地址  只是用proxy做了个请求.</p>
<p>大家都有过这样的经历，拨打10086客服电话，可能一个地区的10086客服有几个或者几十个，你永远都不需要关心在电话那头的是哪一个，叫什么，男的，还是女的，漂亮的还是帅气的，你都不关心，你关心的是你的问题能不能得到专业的解答，你只需要拨通了10086的总机号码，电话那头总会有人会回答你，只是有时慢有时快而已。那么这里的10086总机号码就是我们说的反向代理。客户不知道真正提供服务人的是谁。   反向代理隐藏了真实的服务端，当我们请求 www.baidu.com 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，www.baidu.com 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p>
<p>client &lt;==&gt; proxy &lt;==&gt; serverA or serverB</p>
<p>这里客户端只知道proxy   具体哪个服务器内容,是proxy分配的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个是代理客户端，为客户端收发请求，使真实客户端对服务器不可见。&lt;br&gt;一个是代理服务器，为服务器收发请求，使真实服务器对客户端不可见。&lt;br&gt;简单点说&lt;br&gt;代理的目的本身都是为了隐藏自己真实的地址。&lt;/p&gt;
&lt;p&gt;正向代理,是客户端用的,因为符合正常的网络请求，所以叫正向代理。&lt;br&gt;而反向代理，是服务器用的，所以叫反向代理。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://sunhao.win/categories/php/"/>
    
    
      <category term="php" scheme="http://sunhao.win/tags/php/"/>
    
      <category term="proxy" scheme="http://sunhao.win/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Unicode 和 UTF-8 有何区别？</title>
    <link href="http://sunhao.win/articles/soft-unicode-utf8.html"/>
    <id>http://sunhao.win/articles/soft-unicode-utf8.html</id>
    <published>2017-04-26T08:53:56.000Z</published>
    <updated>2017-04-26T08:56:59.104Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”字节“。再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机“。开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。<br><a id="more"></a></p>
<p>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作。遇上0×10,<br>终端就换行，遇上0×07, 终端就向人们嘟嘟叫，例好遇上0x1b,<br>打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0×20以下的字节状态称为”控制码”。他们又把所有的空<br>格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉<br> 很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机<br>保存他们的文字，他们决定采用<br>127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128<br> 到255这一页的字符集被称”扩展字符集“。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气<br>地把那些127号之后的奇异符号们直接取消掉,<br>规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到<br>0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的<br>字母、日文的假名们都编进去了，连在 ASCII<br>里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。<br>中国人民看到这样很不错，于是就把这种汉字方案叫做 “GB2312“。GB2312 是对 ASCII 的中文扩展。但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把<br>GB2312 没有用到的码位找出来老实不客气地用上。<br>后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字<br>符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。 后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。 中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS“（Double<br> Byte Charecter Set<br>双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处<br>理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣<br> 们都要每天念下面这个咒语数百遍： “一个汉字算两个英文字符！一个汉字算两个英文字符……”因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海<br>里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS<br>编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序<br>就必须加装另一套支持 BIG5<br>编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎<br>么办？ 真是计算机的巴比伦塔命题啊！正在这时，大天使加百列及时出现了——一个叫 ISO<br>（国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号<br> 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。<br>unicode开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO<br>就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ASCII里的那些“半角”字符，unicode包持其原编码不变，只是将其长度由原<br>来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高8位永远是0，因此这种大气的方案在<br>保存英文文本时会多浪费一倍的空间。这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，从unicode开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符“！同时，也都是统一的”两个字节“，请注意”字符”和”字节”两个术语的不同，“字节”是一个8位的物理存贮单元，而“字符”则是一个文化相关的符号。在unicode中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。unicode同样也不完美，这里就有两个的问题，一个是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是<br>分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每<br>个英文字母前都必然有二到三个字节是0，这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII<br>码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中<br>文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。Unicode符号范围 | UTF-8编码方式(十六进制)         |        （二进制）<br>—————————————————————–<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx原文：unicode,ansi,utf-8,unicode big endian编码的区别</p>
<p>原文:<a href="https://wenku.baidu.com/view/cb9fe505cc17552707220865.html" target="_blank" rel="external">https://wenku.baidu.com/view/cb9fe505cc17552707220865.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”字节“。再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机“。开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。&lt;br&gt;
    
    </summary>
    
      <category term="软件" scheme="http://sunhao.win/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="utf8" scheme="http://sunhao.win/tags/utf8/"/>
    
      <category term="unicode" scheme="http://sunhao.win/tags/unicode/"/>
    
  </entry>
  
  <entry>
    <title>linux-crontab</title>
    <link href="http://sunhao.win/articles/linux-crontab.html"/>
    <id>http://sunhao.win/articles/linux-crontab.html</id>
    <published>2017-04-25T00:47:48.000Z</published>
    <updated>2017-04-25T01:03:40.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170425/084113058.png" alt="mark"><br>该词来源于希腊语 chronos(χρνο)，原意是时间。常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。</p>
<a id="more"></a>
<p>使用权限:</p>
<p>root用户和crontab文件的所有者</p>
<p>语法:</p>
<p>crontab [-e [UserName]|-l [UserName]|-r [UserName]|-v [UserName]|File ]</p>
<p>说明:</p>
<p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p>
<p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p>
<p>参数:</p>
<p>-e [UserName]: 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</p>
<p>-r [UserName]: 删除目前的时程表</p>
<p>-l [UserName]: 列出目前的时程表</p>
<p>-v [UserName]:列出用户cron作业的状态</p>
<p>时程表的格式如下:</p>
<p>f1 f2 f3 f4 f5 program</p>
<p>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程式。</p>
<p>当 f1 为 <em> 时表示每分钟都要执行 program，f2 为 </em> 时表示每小时都要执行程式，其余类推</p>
<p>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推</p>
<p>当 f1 为 <em>/n 时表示每 n 分钟个时间间隔执行一次，f2 为 </em>/n 表示每 n 小时个时间间隔执行一次，其余类推</p>
<p>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推</p>
<p>使用者也可以将所有的设定先存放在档案 file 中，用 crontab file 的方式来设定时程表。</p>
<p>由于unix版本不一样，所以部分语法有差别，例如在hp unix aix 中设定间隔执行如果采用*/n 方式将出现语法错误，在这类unix中 ，间隔执行只能以列举方式。</p>
<p>使用方法</p>
<p>用VI编辑一个文件 cronfile，然后在这个文件中输入格式良好的时程表。编辑完成后，保存并退出。[2] </p>
<p>在命令行输入</p>
<p>$: crontab cronfile</p>
<p>这样就将cronfile文件提交给c r o n进程，同时，新创建cronfile的一个副本已经被放在/ v a r / s p o o l / c r o n目录中，文件名就是用户名。</p>
<p>例子:</p>
<p>每月每天每小时的第 0 分钟执行一次 /bin/ls :</p>
<p>0 <em> </em> <em> </em> /bin/ls</p>
<p>在 12 月内, 每天的早上 6 点到 12 点中，每隔 20 分钟执行一次 /usr/bin/backup :</p>
<p><em>/20 6-12 </em> 12 * /usr/bin/backup</p>
<p>周一到周五每天下午 5:00 寄一封信给 alex_mail_name :</p>
<p>0 17 <em> </em> 1-5 mail -s “hi” alex_mail_name &lt; /tmp/maildata</p>
<p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</p>
<p>20 0-23/2 <em> </em> * echo “haha”</p>
<p>晚上11点到早上8点之间每两个小时，早上8点</p>
<p>0 23-7/2，8 <em> </em> * date</p>
<p>在hpunix,中，每20分钟执行一次，表示为：0,20,40 <em> </em> <em> </em> 而不能采用*/n方式，否则出现语法错误</p>
<p>30 21 <em> </em> * /usr/local/apache/bin/apachectl restart<br>上面的例子表示每晚的21:30重启apache。</p>
<p>45 4 1,10,22 <em> </em> /usr/local/apache/bin/apachectl restart<br>上面的例子表示每月1、10、22日的4 : 45重启apache。</p>
<p>10 1 <em> </em> 6,0 /usr/local/apache/bin/apachectl restart<br>上面的例子表示每周六、周日的1 : 10重启apache。</p>
<p>0,30 18-23 <em> </em> * /usr/local/apache/bin/apachectl restart<br>上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。</p>
<p>0 23 <em> </em> 6 /usr/local/apache/bin/apachectl restart<br>上面的例子表示每星期六的11 : 00 pm重启apache。</p>
<ul>
<li><p><em>/1 </em> <em> </em> /usr/local/apache/bin/apachectl restart<br>每一小时重启apache</p>
</li>
<li><p>23-7/1 <em> </em> * /usr/local/apache/bin/apachectl restart<br>晚上11点到早上7点之间，每隔一小时重启apache</p>
</li>
</ul>
<p>0 11 4 * mon-wed /usr/local/apache/bin/apachectl restart<br>每月的4号与每周一到周三的11点重启apache</p>
<p>0 4 1 jan * /usr/local/apache/bin/apachectl restart<br>一月一号的4点重启apache</p>
<p>注意:</p>
<ol>
<li><p>当程式在你所指定的时间执行后，系统会寄一封信给你，显示该程式执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可。</p>
</li>
<li><p>%在crontab中被认为是newline，要用\来escape才行。比如crontab执行行中，如果有”date +%Y%m%d”，必须替换为：”date +\%Y\%m\%d”<br>创建crontab</p>
</li>
</ol>
<p>在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。99 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$HOME目录下的.profile文件，在其中加入这样一行：<br>EDITOR=vi; export EDITOR<br>然后保存并退出。</p>
<p>不妨创建一个名为<user>cron的文件，其中<user>是用户名，为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：</user></user></p>
<p>$ crontab davecron</p>
<p>现在该文件已经提交给cron进程，同时，新创建文件的一个副本已经被放在/var/spool/cron目录中，文件名就是用户名（即，dave）。</p>
<p>列出crontab文件</p>
<p>为了列出crontab文件，可以用：</p>
<p>$crontab -l</p>
<p>编辑crontab文件</p>
<p>如果希望添加、删除或编辑crontab文件中的条目，而EDITOR环境变量又设置为vi，那么就可以用vi来编辑crontab文件，相应的命令为：</p>
<p>$ crontab -e</p>
<p>可以像使用vi编辑其他任何文件那样修改crontab文件并退出。</p>
<p>删除crontab文件</p>
<p>为了删除crontab文件，可以用：</p>
<p>$ crontab -r<br>注释crontab文件<br>如果不希望删除写好的crontab文件，在该crontab文件前添加#将该文件注释掉。<br>恢复丢失的crontab文件<br>如果不小心误删了crontab文件，假设你在自己的$HOME目录下还有一个备份，那么可以将其拷贝到/var/spool/cron/<username>，其中<username>是用户名。如果由于权限问题无法完成拷贝，可以用：</username></username></p>
<p>$ crontab <filename></filename></p>
<p>其中，<filename>是你在$HOME目录中副本的文件名。</filename></p>
<p>crontab中的输出配置</p>
<p>crontab中经常配置运行脚本输出为：&gt;/dev/null 2&gt;&amp;1，来避免crontab运行中有内容输出。</p>
<p>shell命令的结果可以通过‘&gt; ’的形式来定义输出</p>
<p>/dev/null 代表空设备文件</p>
<blockquote>
<p>代表重定向到哪里，例如：echo “123” &gt; /home/123.txt</p>
</blockquote>
<p>1 表示stdout标准输出，系统默认值是1，所以”&gt;/dev/null”等同于”1&gt;/dev/null”</p>
<p>2 表示stderr标准错误</p>
<p>&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</p>
<p>那么重定向输出语句的含义：</p>
<p>1&gt;/dev/null 首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，不显示任何信息。</p>
<p>2&gt;&amp;1 表示标准错误输出重定向等同于标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170425/084113058.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;该词来源于希腊语 chronos(χρνο)，原意是时间。常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux" scheme="http://sunhao.win/tags/linux/"/>
    
      <category term="crontab" scheme="http://sunhao.win/tags/crontab/"/>
    
  </entry>
  
</feed>
